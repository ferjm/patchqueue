# HG changeset patch
# User Fernando Jimenez Moreno <ferjmoreno@gmail.com>
# Parent  6cda2f503bc90348d7b05f1406b516db87847667

diff --git a/servo/components/style/custom_properties.rs b/servo/components/style/custom_properties.rs
--- a/servo/components/style/custom_properties.rs
+++ b/servo/components/style/custom_properties.rs
@@ -9,17 +9,17 @@
 use Atom;
 use cssparser::{Delimiter, Parser, ParserInput, SourcePosition, Token, TokenSerializationType};
 use parser::ParserContext;
 use properties::{CSSWideKeyword, DeclaredValue};
 use selectors::parser::SelectorParseError;
 use servo_arc::Arc;
 use std::ascii::AsciiExt;
 use std::borrow::{Borrow, Cow};
-use std::collections::{HashMap, hash_map, HashSet};
+use std::collections::{HashMap, HashSet};
 use std::fmt;
 use std::hash::Hash;
 use style_traits::{HasViewportPercentage, ToCss, StyleParseError, ParseError};
 
 /// A custom property name is just an `Atom`.
 ///
 /// Note that this does not include the `--` prefix
 pub type Name = Atom;
@@ -139,18 +139,21 @@ where
     }
 
     /// Get the name of a custom property given its list index.
     pub fn get_key_at(&self, index: u32) -> Option<&K> {
         self.index.get(index as usize)
     }
 
     /// Get an iterator for custom properties computed values.
-    pub fn iter(&self) -> hash_map::Iter<K, V> {
-        self.values.iter()
+    pub fn iter<'a>(&'a self) -> OrderedMapIterator<'a, K, V> {
+        OrderedMapIterator {
+            inner: self,
+            pos: 0,
+        }
     }
 
     /// Get the count of custom properties computed values.
     pub fn len(&self) -> usize {
         debug_assert_eq!(self.values.len(), self.index.len());
         self.values.len()
     }
 
@@ -163,16 +166,66 @@ where
             Some(p) => p,
             None => return None,
         };
         self.index.remove(index);
         self.values.remove(key)
     }
 }
 
+trait Iterable<K, V> {
+    fn index(&self) -> &Vec<K>;
+    fn values(&self) -> &HashMap<K, V>;
+}
+
+impl<K, V> Iterable<K, V> for OrderedMap<K, V>
+where
+    K: Eq + Hash + Clone,
+{
+    fn index(&self) -> &Vec<K> {
+        &self.index
+    }
+
+    fn values(&self) -> &HashMap<K, V> {
+        &self.values
+    }
+}
+
+/// An iterator for OrderedMap
+pub struct OrderedMapIterator<'a, K, V>
+where
+    K: 'a + Eq + Hash + Clone, V: 'a,
+{
+    /// The OrderedMap itself.
+    inner: &'a OrderedMap<K, V>,
+    /// The position of the iterator.
+    pos: usize,
+}
+
+impl<'a, K, V> Iterator for OrderedMapIterator<'a, K, V>
+where
+    K: Eq + Hash + Clone,
+{
+    type Item = (&'a K, &'a V);
+
+    fn next(&mut self) -> Option<Self::Item> {
+        let ref index = self.inner.index();
+        if self.pos >= index.len() {
+            return None;
+        }
+
+        let ref name = index[index.len() - self.pos - 1];
+        self.pos += 1;
+        match self.inner.values().get(name) {
+            Some(value) => Some((name, value)),
+            None => None,
+        }
+    }
+}
+
 impl ComputedValue {
     fn empty() -> ComputedValue {
         ComputedValue {
             css: String::new(),
             last_token_type: TokenSerializationType::nothing(),
             first_token_type: TokenSerializationType::nothing(),
         }
     }
diff --git a/servo/ports/geckolib/glue.rs b/servo/ports/geckolib/glue.rs
--- a/servo/ports/geckolib/glue.rs
+++ b/servo/ports/geckolib/glue.rs
@@ -3521,17 +3521,17 @@ pub extern "C" fn Servo_GetCustomPropert
                                                name: *const nsAString,
                                                value: *mut nsAString) -> bool {
     let custom_properties = match computed_values.custom_properties() {
         Some(p) => p,
         None => return false,
     };
 
     let name = unsafe { Atom::from((&*name)) };
-    let computed_value = match custom_properties.get_computed_value(&name) {
+    let computed_value = match custom_properties.get(&name) {
         Some(v) => v,
         None => return false,
     };
 
     computed_value.to_css(unsafe { value.as_mut().unwrap() }).unwrap();
     true
 }
 
@@ -3547,17 +3547,17 @@ pub extern "C" fn Servo_GetCustomPropert
 pub extern "C" fn Servo_GetCustomPropertyNameAt(computed_values: ServoStyleContextBorrowed,
                                                 index: u32,
                                                 name: *mut nsAString) -> bool {
     let custom_properties = match computed_values.custom_properties() {
         Some(p) => p,
         None => return false,
     };
 
-    let property_name = match custom_properties.get_name_at(index) {
+    let property_name = match custom_properties.get_key_at(index) {
         Some(n) => n,
         None => return false,
     };
 
     let name = unsafe { name.as_mut().unwrap() };
     name.assign(&*property_name.as_slice());
 
     true
