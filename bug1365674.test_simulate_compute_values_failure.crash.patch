# HG changeset patch
# User Fernando Jimenez Moreno <ferjmoreno@gmail.com>
# Parent  8e98dab5054dd093a37ba20c62cf0523e484cfbd
Bug 1365674 - stylo: Simulate compute values failure for tests. r?hiro

diff --git a/dom/animation/KeyframeUtils.cpp b/dom/animation/KeyframeUtils.cpp
--- a/dom/animation/KeyframeUtils.cpp
+++ b/dom/animation/KeyframeUtils.cpp
@@ -385,17 +385,18 @@ AppendValueAsString(JSContext* aCx,
 static PropertyValuePair
 MakePropertyValuePair(nsCSSPropertyID aProperty, const nsAString& aStringValue,
                       nsCSSParser& aParser, nsIDocument* aDocument);
 
 static bool
 HasValidOffsets(const nsTArray<Keyframe>& aKeyframes);
 
 static void
-MarkAsComputeValuesFailureKey(PropertyValuePair& aPair);
+MarkAsComputeValuesFailureKey(PropertyValuePair& aPair,
+                              StyleBackendType aBackend);
 
 static bool
 IsComputeValuesFailureKey(const PropertyValuePair& aPair);
 
 static void
 BuildSegmentsFromValueEntries(nsTArray<KeyframeValueEntry>& aEntries,
                               nsTArray<AnimationProperty>& aResult);
 
@@ -862,31 +863,34 @@ ConvertKeyframeSequence(JSContext* aCx,
       JS::Rooted<JSObject*> object(aCx, &value.toObject());
       if (!GetPropertyValuesPairs(aCx, object,
                                   ListAllowance::eDisallow,
                                   propertyValuePairs)) {
         return false;
       }
     }
 
+    StyleBackendType styleBackend = aDocument->GetStyleBackendType();
+
     for (PropertyValuesPair& pair : propertyValuePairs) {
       MOZ_ASSERT(pair.mValues.Length() == 1);
       keyframe->mPropertyValues.AppendElement(
         MakePropertyValuePair(pair.mProperty, pair.mValues[0], parser,
                               aDocument));
 
       // When we go to convert keyframes into arrays of property values we
       // call StyleAnimation::ComputeValues. This should normally return true
       // but in order to test the case where it does not, BaseKeyframeDict
       // includes a chrome-only member that can be set to indicate that
       // ComputeValues should fail for shorthand property values on that
       // keyframe.
       if (nsCSSProps::IsShorthand(pair.mProperty) &&
           keyframeDict.mSimulateComputeValuesFailure) {
-        MarkAsComputeValuesFailureKey(keyframe->mPropertyValues.LastElement());
+        MarkAsComputeValuesFailureKey(keyframe->mPropertyValues.LastElement(),
+                                      styleBackend);
       }
     }
   }
 
   return true;
 }
 
 /**
@@ -1109,21 +1113,27 @@ HasValidOffsets(const nsTArray<Keyframe>
  * Takes a property-value pair for a shorthand property and modifies the
  * value to indicate that when we call StyleAnimationValue::ComputeValues on
  * that value we should behave as if that function had failed.
  *
  * @param aPair The PropertyValuePair to modify. |aPair.mProperty| must be
  *              a shorthand property.
  */
 static void
-MarkAsComputeValuesFailureKey(PropertyValuePair& aPair)
+MarkAsComputeValuesFailureKey(PropertyValuePair& aPair,
+                              StyleBackendType aBackend)
 {
   MOZ_ASSERT(nsCSSProps::IsShorthand(aPair.mProperty),
              "Only shorthand property values can be marked as failure values");
 
+  if (aBackend == StyleBackendType::Servo) {
+    Servo_DeclarationBlock_SimulateComputeValuesFailure(aPair.mServoDeclarationBlock);
+    return;
+  }
+
   // We store shorthand values as nsCSSValueTokenStream objects whose mProperty
   // and mShorthandPropertyID are eCSSProperty_UNKNOWN and whose mTokenStream
   // member contains the shorthand property's value as a string.
   //
   // We need to leave mShorthandPropertyID as eCSSProperty_UNKNOWN so that
   // nsCSSValue::AppendToString returns the mTokenStream value, but we can
   // update mPropertyID to a special value to indicate that this is
   // a special failure sentinel.

