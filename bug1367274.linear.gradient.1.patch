# HG changeset patch
# User Fernando Jimenez Moreno <ferjmoreno@gmail.com>
# Parent  a418121d46250f91728b86d9eea331029c264c30
Bug 1367274 - stylo: preserve linear-gradient keyword values. r?xidorn

diff --git a/servo/components/layout/display_list_builder.rs b/servo/components/layout/display_list_builder.rs
--- a/servo/components/layout/display_list_builder.rs
+++ b/servo/components/layout/display_list_builder.rs
@@ -51,17 +51,17 @@ use style::computed_values::{background_
 use style::computed_values::{background_repeat, border_style, cursor};
 use style::computed_values::{image_rendering, overflow_x, pointer_events, position, visibility};
 use style::logical_geometry::{LogicalPoint, LogicalRect, LogicalSize, WritingMode};
 use style::properties::{self, ServoComputedValues};
 use style::properties::longhands::border_image_repeat::computed_value::RepeatKeyword;
 use style::properties::style_structs;
 use style::servo::restyle_damage::REPAINT;
 use style::values::{Either, RGBA};
-use style::values::computed::{Gradient, GradientItem, LengthOrPercentage};
+use style::values::computed::{Angle, Gradient, GradientItem, LengthOrPercentage};
 use style::values::computed::{LengthOrPercentageOrAuto, NumberOrPercentage, Position};
 use style::values::computed::effects::SimpleShadow;
 use style::values::computed::image::{EndingShape, LineDirection};
 use style::values::generics::background::BackgroundSize;
 use style::values::generics::effects::Filter;
 use style::values::generics::image::{Circle, Ellipse, EndingShape as GenericEndingShape};
 use style::values::generics::image::{GradientItem as GenericGradientItem, GradientKind};
 use style::values::generics::image::{Image, ShapeExtent};
@@ -1204,16 +1204,28 @@ impl FragmentDisplayListBuilding for Fra
     fn convert_linear_gradient(&self,
                                bounds: &Rect<Au>,
                                stops: &[GradientItem],
                                direction: &LineDirection,
                                repeating: bool)
                                -> display_list::Gradient {
         let angle = match *direction {
             LineDirection::Angle(angle) => angle.radians(),
+            LineDirection::Horizontal(x) => {
+                match x {
+                    X::Left => Angle::Degree(270.).radians(),
+                    X::Right => Angle::Degree(90.).radians(),
+                }
+            },
+            LineDirection::Vertical(y) => {
+                match y {
+                    Y::Top => Angle::Degree(0.).radians(),
+                    Y::Bottom => Angle::Degree(180.).radians(),
+                }
+            },
             LineDirection::Corner(horizontal, vertical) => {
                 // This the angle for one of the diagonals of the box. Our angle
                 // will either be this one, this one + PI, or one of the other
                 // two perpendicular angles.
                 let atan = (bounds.size.height.to_f32_px() /
                             bounds.size.width.to_f32_px()).atan();
                 match (horizontal, vertical) {
                     (X::Right, Y::Bottom)
diff --git a/servo/components/style/gecko/conversions.rs b/servo/components/style/gecko/conversions.rs
--- a/servo/components/style/gecko/conversions.rs
+++ b/servo/components/style/gecko/conversions.rs
@@ -10,16 +10,17 @@
 
 use app_units::Au;
 use gecko::values::{convert_rgba_to_nscolor, GeckoStyleCoordConvertible};
 use gecko_bindings::bindings::{Gecko_CreateGradient, Gecko_SetGradientImageValue, Gecko_SetLayerImageImageValue};
 use gecko_bindings::bindings::{Gecko_InitializeImageCropRect, Gecko_SetImageElement};
 use gecko_bindings::structs::{nsCSSUnit, nsStyleCoord_CalcValue, nsStyleImage};
 use gecko_bindings::structs::{nsresult, SheetType};
 use gecko_bindings::sugar::ns_style_coord::{CoordDataValue, CoordData, CoordDataMut};
+use std::f32::consts::PI;
 use stylesheets::{Origin, RulesMutateError};
 use values::computed::{Angle, CalcLengthOrPercentage, Gradient, Image};
 use values::computed::{LengthOrPercentage, LengthOrPercentageOrAuto};
 use values::generics::grid::TrackSize;
 use values::generics::image::{CompatMode, Image as GenericImage, GradientItem};
 use values::generics::rect::Rect;
 use values::specified::length::Percentage;
 use values::specified::url::SpecifiedUrl;
@@ -210,20 +211,51 @@ impl nsStyleImage {
                                          gradient.repeating,
                                          gradient.compat_mode != CompatMode::Modern,
                                          gradient.compat_mode == CompatMode::Moz,
                                          stop_count as u32)
                 };
 
                 match direction {
                     LineDirection::Angle(angle) => {
+                        // PI radians (180 degrees) is ignored because this is the default value.
+                        if angle.radians() != PI {
+                            unsafe {
+                                (*gecko_gradient).mAngle.set(angle);
+                                (*gecko_gradient).mBgPosX.set_value(CoordDataValue::None);
+                                (*gecko_gradient).mBgPosY.set_value(CoordDataValue::None);
+                            }
+                        }
+                    },
+                    LineDirection::Horizontal(x) => {
+                        let x = match x {
+                            X::Left => 0.0,
+                            X::Right => 1.0,
+                        };
+
                         unsafe {
-                            (*gecko_gradient).mAngle.set(angle);
-                            (*gecko_gradient).mBgPosX.set_value(CoordDataValue::None);
-                            (*gecko_gradient).mBgPosY.set_value(CoordDataValue::None);
+                            (*gecko_gradient).mAngle.set_value(CoordDataValue::None);
+                            (*gecko_gradient).mBgPosX
+                                             .set_value(CoordDataValue::Percent(x));
+                            (*gecko_gradient).mBgPosY
+                                             .set_value(CoordDataValue::Percent(0.5));
+                        }
+                    },
+                    LineDirection::Vertical(y) => {
+                        let y = match y {
+                            Y::Top => 0.0,
+                            Y::Bottom => 1.0,
+                        };
+
+                        unsafe {
+                            (*gecko_gradient).mAngle.set_value(CoordDataValue::None);
+                            (*gecko_gradient).mBgPosX
+                                             .set_value(CoordDataValue::Percent(0.5));
+                            (*gecko_gradient).mBgPosY
+                                             .set_value(CoordDataValue::Percent(y));
                         }
                     },
                     LineDirection::Corner(horiz, vert) => {
                         let percent_x = match horiz {
                             X::Left => 0.0,
                             X::Right => 1.0,
                         };
                         let percent_y = match vert {
diff --git a/servo/components/style/values/computed/image.rs b/servo/components/style/values/computed/image.rs
--- a/servo/components/style/values/computed/image.rs
+++ b/servo/components/style/values/computed/image.rs
@@ -50,16 +50,20 @@ pub type GradientKind = GenericGradientK
 >;
 
 /// A computed gradient line direction.
 #[derive(Clone, Copy, Debug, PartialEq)]
 #[cfg_attr(feature = "servo", derive(HeapSizeOf))]
 pub enum LineDirection {
     /// An angle.
     Angle(Angle),
+    /// A horizontal direction.
+    Horizontal(X),
+    /// A vertical direction.
+    Vertical(Y),
     /// A corner.
     Corner(X, Y),
     /// A Position and an Angle for legacy `-moz-` prefixed gradient.
     #[cfg(feature = "gecko")]
     MozPosition(Option<Position>, Option<Angle>),
 }
 
 /// A computed radial gradient ending shape.
@@ -73,27 +77,41 @@ pub type ColorStop = GenericColorStop<RG
 
 /// Computed values for ImageRect.
 pub type ImageRect = GenericImageRect<NumberOrPercentage>;
 
 impl GenericLineDirection for LineDirection {
     fn points_downwards(&self) -> bool {
         match *self {
             LineDirection::Angle(angle) => angle.radians() == PI,
+            LineDirection::Vertical(Y::Bottom) => true,
             LineDirection::Corner(..) => false,
             #[cfg(feature = "gecko")]
             LineDirection::MozPosition(_, _) => false,
+            _ => false,
         }
     }
 
     fn to_css<W>(&self, dest: &mut W, compat_mode: CompatMode) -> fmt::Result
         where W: fmt::Write
     {
         match *self {
             LineDirection::Angle(ref angle) => angle.to_css(dest),
+            LineDirection::Horizontal(x) => {
+                if compat_mode == CompatMode::Modern {
+                    dest.write_str("to ")?;
+                }
+                x.to_css(dest)
+            },
+            LineDirection::Vertical(y) => {
+                if compat_mode == CompatMode::Modern {
+                    dest.write_str("to ")?;
+                }
+                y.to_css(dest)
+            },
             LineDirection::Corner(x, y) => {
                 if compat_mode == CompatMode::Modern {
                     dest.write_str("to ")?;
                 }
                 x.to_css(dest)?;
                 dest.write_str(" ")?;
                 y.to_css(dest)
             },
@@ -112,47 +130,27 @@ impl GenericLineDirection for LineDirect
                 }
                 Ok(())
             }
         }
     }
 }
 
 impl SpecifiedLineDirection {
-    /// Takes a modern linear gradient angle and convert it to Gecko's old coordinate for
-    /// webkit-prefixed version
-    fn to_gecko_coordinate(modern_angle: f32, _compat_mode: CompatMode) -> f32 {
-        #[cfg(feature = "gecko")]
-        {
-            return match _compat_mode {
-                CompatMode::WebKit => -modern_angle + 270.,
-                _ => modern_angle,
-            }
-        }
-        #[cfg(feature = "servo")]
-        modern_angle
-    }
-
     /// Manually derived to_computed_value
-    fn to_computed_value(&self, context: &Context, compat_mode: CompatMode) -> LineDirection {
+    fn to_computed_value(&self, context: &Context, _: CompatMode) -> LineDirection {
         match *self {
             SpecifiedLineDirection::Angle(ref angle) => {
                 LineDirection::Angle(angle.to_computed_value(context))
             },
-            SpecifiedLineDirection::Horizontal(X::Left) => {
-                LineDirection::Angle(Angle::Degree(SpecifiedLineDirection::to_gecko_coordinate(270., compat_mode)))
-            },
-            SpecifiedLineDirection::Horizontal(X::Right) => {
-                LineDirection::Angle(Angle::Degree(SpecifiedLineDirection::to_gecko_coordinate(90., compat_mode)))
+            SpecifiedLineDirection::Horizontal(x) => {
+                LineDirection::Horizontal(x)
             },
-            SpecifiedLineDirection::Vertical(Y::Top) => {
-                LineDirection::Angle(Angle::Degree(SpecifiedLineDirection::to_gecko_coordinate(0., compat_mode)))
-            },
-            SpecifiedLineDirection::Vertical(Y::Bottom) => {
-                LineDirection::Angle(Angle::Degree(SpecifiedLineDirection::to_gecko_coordinate(180., compat_mode)))
+            SpecifiedLineDirection::Vertical(y) => {
+                LineDirection::Vertical(y)
             },
             SpecifiedLineDirection::Corner(x, y) => {
                 LineDirection::Corner(x, y)
             },
             #[cfg(feature = "gecko")]
             SpecifiedLineDirection::MozPosition(ref position, ref angle) => {
                 LineDirection::MozPosition(position.to_computed_value(context),
                                            angle.to_computed_value(context))
@@ -160,16 +158,22 @@ impl SpecifiedLineDirection {
         }
     }
 
     fn from_computed_value(computed: &LineDirection) -> Self {
         match *computed {
             LineDirection::Angle(ref angle) => {
                 SpecifiedLineDirection::Angle(ToComputedValue::from_computed_value(angle))
             },
+            LineDirection::Horizontal(x) => {
+                SpecifiedLineDirection::Horizontal(x)
+            },
+            LineDirection::Vertical(y) => {
+                SpecifiedLineDirection::Vertical(y)
+            },
             LineDirection::Corner(x, y) => {
                 SpecifiedLineDirection::Corner(x, y)
             },
             #[cfg(feature = "gecko")]
             LineDirection::MozPosition(ref position, ref angle) => {
                 SpecifiedLineDirection::MozPosition(ToComputedValue::from_computed_value(position),
                                                     ToComputedValue::from_computed_value(angle))
             },
