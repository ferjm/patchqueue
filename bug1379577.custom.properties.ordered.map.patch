# HG changeset patch
# User Fernando Jimenez <ferjmoreno@gmail.com>
# Parent  63e261ce8cb04c913d2e6b19ea451b7078d24dc1

diff --git a/servo/components/style/custom_properties.rs b/servo/components/style/custom_properties.rs
--- a/servo/components/style/custom_properties.rs
+++ b/servo/components/style/custom_properties.rs
@@ -8,19 +8,20 @@
 
 use Atom;
 use cssparser::{Delimiter, Parser, ParserInput, SourcePosition, Token, TokenSerializationType};
 use parser::ParserContext;
 use properties::{CSSWideKeyword, DeclaredValue};
 use selectors::parser::SelectorParseError;
 use servo_arc::Arc;
 use std::ascii::AsciiExt;
-use std::borrow::Cow;
+use std::borrow::{Borrow, Cow};
 use std::collections::{HashMap, hash_map, HashSet};
 use std::fmt;
+use std::hash::Hash;
 use style_traits::{HasViewportPercentage, ToCss, StyleParseError, ParseError};
 
 /// A custom property name is just an `Atom`.
 ///
 /// Note that this does not include the `--` prefix
 pub type Name = Atom;
 
 /// Parse a custom property name.
@@ -92,62 +93,84 @@ impl ToCss for ComputedValue {
 
 /// A map from CSS variable names to CSS variable computed values, used for
 /// resolving.
 ///
 /// A consistent ordering is required for CSSDeclaration objects in the
 /// DOM. CSSDeclarations expose property names as indexed properties, which
 /// need to be stable. So we keep an array of property names which order is
 /// determined on the order that they are added to the name-value map.
+pub type CustomPropertiesMap = OrderedMap<Name, ComputedValue>;
+
+/// A map that preserves order for the keys, and that is easily indexable.
 #[derive(Clone, Debug, Eq, PartialEq)]
-pub struct CustomPropertiesMap {
+pub struct OrderedMap<K, V>
+where
+    K: Eq + Hash + Clone,
+{
     /// Custom property name index.
-    index: Vec<Name>,
+    index: Vec<K>,
     /// Computed values indexed by custom property name.
-    values: HashMap<Name, ComputedValue>,
+    values: HashMap<K, V>,
 }
 
-impl CustomPropertiesMap {
+impl<K, V> OrderedMap<K, V>
+where
+    K: Eq + Hash + Clone,
+{
     /// Creates a new custom properties map.
     pub fn new() -> Self {
-        CustomPropertiesMap {
+        OrderedMap {
             index: Vec::new(),
             values: HashMap::new(),
         }
     }
 
     /// Insert a computed value if it has not previously been inserted.
-    pub fn insert(&mut self, name: &Name, value: ComputedValue) {
-        debug_assert!(!self.index.contains(name));
+    pub fn insert(&mut self, name: K, value: V) {
+        debug_assert!(!self.index.contains(&name));
         self.index.push(name.clone());
-        self.values.insert(name.clone(), value);
+        self.values.insert(name, value);
     }
 
     /// Custom property computed value getter by name.
-    pub fn get_computed_value(&self, name: &Name) -> Option<&ComputedValue> {
+    pub fn get(&self, name: &K) -> Option<&V> {
         let value = self.values.get(name);
         debug_assert_eq!(value.is_some(), self.index.contains(name));
         value
     }
 
     /// Get the name of a custom property given its list index.
-    pub fn get_name_at(&self, index: u32) -> Option<&Name> {
+    pub fn get_key_at(&self, index: u32) -> Option<&K> {
         self.index.get(index as usize)
     }
 
     /// Get an iterator for custom properties computed values.
-    pub fn iter(&self) -> hash_map::Iter<Name, ComputedValue> {
+    pub fn iter(&self) -> hash_map::Iter<K, V> {
         self.values.iter()
     }
 
     /// Get the count of custom properties computed values.
     pub fn len(&self) -> usize {
         debug_assert_eq!(self.values.len(), self.index.len());
         self.values.len()
     }
+
+    fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V>
+    where
+        K: Borrow<Q>,
+        Q: Hash + Eq,
+    {
+        let index = match self.index.iter().position(|k| k.borrow() == key) {
+            Some(p) => p,
+            None => return None,
+        };
+        self.index.remove(index);
+        self.values.remove(key)
+    }
 }
 
 impl ComputedValue {
     fn empty() -> ComputedValue {
         ComputedValue {
             css: String::new(),
             last_token_type: TokenSerializationType::nothing(),
             first_token_type: TokenSerializationType::nothing(),
@@ -382,40 +405,42 @@ fn parse_var_function<'i, 't>(input: &mu
     if let Some(ref mut refs) = *references {
         refs.insert(Atom::from(name));
     }
     Ok(())
 }
 
 /// Add one custom property declaration to a map, unless another with the same
 /// name was already there.
-pub fn cascade<'a>(custom_properties: &mut Option<HashMap<&'a Name, BorrowedSpecifiedValue<'a>>>,
+pub fn cascade<'a>(custom_properties: &mut Option<OrderedMap<&'a Name, BorrowedSpecifiedValue<'a>>>,
                    inherited: &'a Option<Arc<CustomPropertiesMap>>,
                    seen: &mut HashSet<&'a Name>,
                    name: &'a Name,
                    specified_value: DeclaredValue<'a, Box<SpecifiedValue>>) {
     let was_already_present = !seen.insert(name);
     if was_already_present {
         return;
     }
 
     let map = match *custom_properties {
         Some(ref mut map) => map,
         None => {
-            *custom_properties = Some(match *inherited {
-                Some(ref inherited) => inherited.iter().map(|(key, inherited_value)| {
-                    (key, BorrowedSpecifiedValue {
+            let mut map = OrderedMap::new();
+            if let Some(ref inherited) = *inherited {
+                for name in &inherited.index {
+                    let inherited_value = inherited.get(name).unwrap();
+                    map.insert(name, BorrowedSpecifiedValue {
                         css: &inherited_value.css,
                         first_token_type: inherited_value.first_token_type,
                         last_token_type: inherited_value.last_token_type,
                         references: None
                     })
-                }).collect(),
-                None => HashMap::new(),
-            });
+                }
+            }
+            *custom_properties = Some(map);
             custom_properties.as_mut().unwrap()
         }
     };
     match specified_value {
         DeclaredValue::Value(ref specified_value) => {
             map.insert(name, BorrowedSpecifiedValue {
                 css: &specified_value.css,
                 first_token_type: specified_value.first_token_type,
@@ -435,49 +460,49 @@ pub fn cascade<'a>(custom_properties: &m
 }
 
 /// Returns the final map of applicable custom properties.
 ///
 /// If there was any specified property, we've created a new map and now we need
 /// to remove any potential cycles, and wrap it in an arc.
 ///
 /// Otherwise, just use the inherited custom properties map.
-pub fn finish_cascade(specified_values_map: Option<HashMap<&Name, BorrowedSpecifiedValue>>,
+pub fn finish_cascade(specified_values_map: Option<OrderedMap<&Name, BorrowedSpecifiedValue>>,
                       inherited: &Option<Arc<CustomPropertiesMap>>)
                       -> Option<Arc<CustomPropertiesMap>> {
     if let Some(mut map) = specified_values_map {
         remove_cycles(&mut map);
         Some(Arc::new(substitute_all(map, inherited)))
     } else {
         inherited.clone()
     }
 }
 
 /// https://drafts.csswg.org/css-variables/#cycles
 ///
 /// The initial value of a custom property is represented by this property not
 /// being in the map.
-fn remove_cycles(map: &mut HashMap<&Name, BorrowedSpecifiedValue>) {
+fn remove_cycles(map: &mut OrderedMap<&Name, BorrowedSpecifiedValue>) {
     let mut to_remove = HashSet::new();
     {
         let mut visited = HashSet::new();
         let mut stack = Vec::new();
-        for name in map.keys() {
+        for name in &map.index {
             walk(map, name, &mut stack, &mut visited, &mut to_remove);
 
-            fn walk<'a>(map: &HashMap<&'a Name, BorrowedSpecifiedValue<'a>>,
+            fn walk<'a>(map: &OrderedMap<&'a Name, BorrowedSpecifiedValue<'a>>,
                         name: &'a Name,
                         stack: &mut Vec<&'a Name>,
                         visited: &mut HashSet<&'a Name>,
                         to_remove: &mut HashSet<Name>) {
                 let already_visited_before = !visited.insert(name);
                 if already_visited_before {
                     return
                 }
-                if let Some(value) = map.get(name) {
+                if let Some(value) = map.get(&name) {
                     if let Some(references) = value.references {
                         stack.push(name);
                         for next in references {
                             if let Some(position) = stack.iter().position(|&x| x == next) {
                                 // Found a cycle
                                 for &in_cycle in &stack[position..] {
                                     to_remove.insert(in_cycle.clone());
                                 }
@@ -486,51 +511,53 @@ fn remove_cycles(map: &mut HashMap<&Name
                             }
                         }
                         stack.pop();
                     }
                 }
             }
         }
     }
-    for name in &to_remove {
-        map.remove(name);
+    for name in to_remove {
+        map.remove(&name);
     }
 }
 
 /// Replace `var()` functions for all custom properties.
-fn substitute_all(specified_values_map: HashMap<&Name, BorrowedSpecifiedValue>,
+fn substitute_all(specified_values_map: OrderedMap<&Name, BorrowedSpecifiedValue>,
                   inherited: &Option<Arc<CustomPropertiesMap>>)
                   -> CustomPropertiesMap {
     let mut custom_properties_map = CustomPropertiesMap::new();
     let mut invalid = HashSet::new();
-    for (&name, value) in &specified_values_map {
+    for name in &specified_values_map.index {
+        let value = specified_values_map.get(name).unwrap();
+
         // If this value is invalid at computed-time it won’t be inserted in computed_values_map.
         // Nothing else to do.
         let _ = substitute_one(
             name, value, &specified_values_map, inherited, None,
             &mut custom_properties_map, &mut invalid);
     }
 
     custom_properties_map
 }
 
 /// Replace `var()` functions for one custom property.
 /// Also recursively record results for other custom properties referenced by `var()` functions.
 /// Return `Err(())` for invalid at computed time.
 /// or `Ok(last_token_type that was pushed to partial_computed_value)` otherwise.
 fn substitute_one(name: &Name,
                   specified_value: &BorrowedSpecifiedValue,
-                  specified_values_map: &HashMap<&Name, BorrowedSpecifiedValue>,
+                  specified_values_map: &OrderedMap<&Name, BorrowedSpecifiedValue>,
                   inherited: &Option<Arc<CustomPropertiesMap>>,
                   partial_computed_value: Option<&mut ComputedValue>,
                   custom_properties_map: &mut CustomPropertiesMap,
                   invalid: &mut HashSet<Name>)
                   -> Result<TokenSerializationType, ()> {
-    if let Some(computed_value) = custom_properties_map.get_computed_value(&name) {
+    if let Some(computed_value) = custom_properties_map.get(&name) {
         if let Some(partial_computed_value) = partial_computed_value {
             partial_computed_value.push_variable(computed_value)
         }
         return Ok(computed_value.last_token_type)
     }
 
     if invalid.contains(name) {
         return Err(());
@@ -538,17 +565,17 @@ fn substitute_one(name: &Name,
     let computed_value = if specified_value.references.map(|set| set.is_empty()) == Some(false) {
         let mut partial_computed_value = ComputedValue::empty();
         let mut input = ParserInput::new(&specified_value.css);
         let mut input = Parser::new(&mut input);
         let mut position = (input.position(), specified_value.first_token_type);
         let result = substitute_block(
             &mut input, &mut position, &mut partial_computed_value,
             &mut |name, partial_computed_value| {
-                if let Some(other_specified_value) = specified_values_map.get(name) {
+                if let Some(other_specified_value) = specified_values_map.get(&name) {
                     substitute_one(name, other_specified_value, specified_values_map, inherited,
                                    Some(partial_computed_value), custom_properties_map, invalid)
                 } else {
                     Err(())
                 }
             }
         );
         if let Ok(last_token_type) = result {
@@ -570,17 +597,17 @@ fn substitute_one(name: &Name,
             first_token_type: specified_value.first_token_type,
             last_token_type: specified_value.last_token_type,
         }
     };
     if let Some(partial_computed_value) = partial_computed_value {
         partial_computed_value.push_variable(&computed_value)
     }
     let last_token_type = computed_value.last_token_type;
-    custom_properties_map.insert(name, computed_value);
+    custom_properties_map.insert(name.clone(), computed_value);
     Ok(last_token_type)
 }
 
 /// Replace `var()` functions in an arbitrary bit of input.
 ///
 /// The `substitute_one` callback is called for each `var()` function in `input`.
 /// If the variable has its initial value,
 /// the callback should return `Err(())` and leave `partial_computed_value` unchanged.
@@ -674,17 +701,17 @@ pub fn substitute<'i>(input: &'i str, fi
                       computed_values_map: &Option<Arc<CustomPropertiesMap>>)
                       -> Result<String, ParseError<'i>> {
     let mut substituted = ComputedValue::empty();
     let mut input = ParserInput::new(input);
     let mut input = Parser::new(&mut input);
     let mut position = (input.position(), first_token_type);
     let last_token_type = substitute_block(
         &mut input, &mut position, &mut substituted, &mut |name, substituted| {
-            if let Some(value) = computed_values_map.as_ref().and_then(|map| map.get_computed_value(name)) {
+            if let Some(value) = computed_values_map.as_ref().and_then(|map| map.get(name)) {
                 substituted.push_variable(value);
                 Ok(value.last_token_type)
             } else {
                 Err(())
             }
         }
     )?;
     substituted.push_from(position, &input, last_token_type);
diff --git a/servo/components/style/properties/properties.mako.rs b/servo/components/style/properties/properties.mako.rs
--- a/servo/components/style/properties/properties.mako.rs
+++ b/servo/components/style/properties/properties.mako.rs
@@ -2308,17 +2308,17 @@ impl ComputedValuesInner {
                     PropertyDeclarationId::Longhand(LonghandId::${longhand.camel_case}) => {
                         self.${style_struct.ident}.${longhand.ident}.to_css_string()
                     }
                 % endfor
             % endfor
             PropertyDeclarationId::Custom(name) => {
                 self.custom_properties
                     .as_ref()
-                    .and_then(|map| map.get_computed_value(name))
+                    .and_then(|map| map.get(name))
                     .map(|value| value.to_css_string())
                     .unwrap_or(String::new())
             }
         }
     }
 }
 
 /// Return a WritingMode bitflags from the relevant CSS properties.
