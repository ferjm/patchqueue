# HG changeset patch
# User Fernando Jimenez Moreno <ferjmoreno@gmail.com>
# Parent  f3483af8ecf997453064201c49c48a682c7f3c29
Bug 1370502 - stylo: Implement ServoStyleRule::SelectorMatchesElement. r?emilio

diff --git a/layout/style/ServoBindingList.h b/layout/style/ServoBindingList.h
--- a/layout/style/ServoBindingList.h
+++ b/layout/style/ServoBindingList.h
@@ -164,16 +164,19 @@ SERVO_BINDING_FUNC(Servo_StyleRule_GetSe
 SERVO_BINDING_FUNC(Servo_StyleRule_GetSelectorTextAtIndex, void,
                    RawServoStyleRuleBorrowed rule, uint32_t index,
                    nsAString* result)
 SERVO_BINDING_FUNC(Servo_StyleRule_GetSpecificityAtIndex, void,
                    RawServoStyleRuleBorrowed rule, uint32_t index,
                    uint64_t* specificity)
 SERVO_BINDING_FUNC(Servo_StyleRule_GetSelectorCount, void,
                    RawServoStyleRuleBorrowed rule, uint32_t* count)
+SERVO_BINDING_FUNC(Servo_StyleRule_SelectorMatchesElement, bool,
+                   RawServoStyleRuleBorrowed, RawGeckoElementBorrowed,
+                   uint32_t index, mozilla::CSSPseudoElementType pseudo_type)
 SERVO_BINDING_FUNC(Servo_ImportRule_GetHref, void,
                    RawServoImportRuleBorrowed rule, nsAString* result)
 SERVO_BINDING_FUNC(Servo_ImportRule_GetSheet, const RawServoStyleSheet*,
                    RawServoImportRuleBorrowed rule)
 SERVO_BINDING_FUNC(Servo_Keyframe_GetKeyText, void,
                    RawServoKeyframeBorrowed keyframe, nsAString* result)
 // Returns whether it successfully changes the key text.
 SERVO_BINDING_FUNC(Servo_Keyframe_SetKeyText, bool,
diff --git a/layout/style/ServoStyleRule.cpp b/layout/style/ServoStyleRule.cpp
--- a/layout/style/ServoStyleRule.cpp
+++ b/layout/style/ServoStyleRule.cpp
@@ -274,13 +274,20 @@ ServoStyleRule::GetSpecificity(uint32_t 
 }
 
 nsresult
 ServoStyleRule::SelectorMatchesElement(Element* aElement,
                                        uint32_t aSelectorIndex,
                                        const nsAString& aPseudo,
                                        bool* aMatches)
 {
-  // TODO Bug 1370502
+  nsCOMPtr<nsIAtom> pseudoElt = NS_Atomize(aPseudo);
+  const CSSPseudoElementType pseudoType =
+    nsCSSPseudoElements::GetPseudoType(pseudoElt,
+                                       CSSEnabledState::eIgnoreEnabledState);
+  *aMatches = Servo_StyleRule_SelectorMatchesElement(mRawRule,
+                                                     aElement,
+                                                     aSelectorIndex,
+                                                     pseudoType);
   return NS_OK;
 }
 
 } // namespace mozilla
diff --git a/servo/ports/geckolib/glue.rs b/servo/ports/geckolib/glue.rs
--- a/servo/ports/geckolib/glue.rs
+++ b/servo/ports/geckolib/glue.rs
@@ -2,16 +2,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 use atomic_refcell::AtomicRefMut;
 use cssparser::{Parser, ParserInput};
 use cssparser::ToCss as ParserToCss;
 use env_logger::LogBuilder;
 use selectors::Element;
+use selectors::matching::{MatchingContext, MatchingMode, matches_selector};
 use std::env;
 use std::fmt::Write;
 use std::ptr;
 use style::context::{QuirksMode, SharedStyleContext, StyleContext};
 use style::context::ThreadLocalStyleContext;
 use style::data::{ElementData, ElementStyles, RestyleData};
 use style::dom::{AnimationOnlyDirtyDescendants, DirtyDescendants};
 use style::dom::{ShowSubtreeData, TElement, TNode};
@@ -1254,16 +1255,55 @@ pub extern "C" fn Servo_StyleRule_GetSpe
             *specificity = 0;
             return;
         }
         *specificity = rule.selectors.0[index].selector.specificity() as u64;
     })
 }
 
 #[no_mangle]
+pub extern "C" fn Servo_StyleRule_SelectorMatchesElement(rule: RawServoStyleRuleBorrowed,
+                                                         element: RawGeckoElementBorrowed,
+                                                         index: u32,
+                                                         pseudo_type: CSSPseudoElementType) -> bool {
+    read_locked_arc(rule, |rule: &StyleRule| {
+        let index = index as usize;
+        if index >= rule.selectors.0.len() {
+            return false;
+        }
+
+        let selector_and_hashes = &rule.selectors.0[index];
+
+        match PseudoElement::from_pseudo_type(pseudo_type) {
+            Some(p) => {
+                // We need to make sure that the requested pseudo element type
+                // matches the selector pseudo element type before proceeding.
+                if let Some(ep) = selector_and_hashes.selector.pseudo_element() {
+                    if *ep != p {
+                        return false;
+                    }
+                }
+            },
+            None => {
+                // Do not attempt to match if a pseudo element is requested and
+                // this is not a pseudo element selector, or vice versa.
+                if selector_and_hashes.selector.has_pseudo_element() {
+                    return false;
+                }
+            },
+        };
+
+        let mut ctx = MatchingContext::new(MatchingMode::ForStatelessPseudoElement, None,
+                                           QuirksMode::NoQuirks);
+        matches_selector(&selector_and_hashes.selector, 0, &selector_and_hashes.hashes,
+                         &GeckoElement(element), &mut ctx, &mut |_, _| {})
+    })
+}
+
+#[no_mangle]
 pub extern "C" fn Servo_ImportRule_GetHref(rule: RawServoImportRuleBorrowed, result: *mut nsAString) {
     read_locked_arc(rule, |rule: &ImportRule| {
         write!(unsafe { &mut *result }, "{}", rule.url.as_str()).unwrap();
     })
 }
 
 #[no_mangle]
 pub extern "C" fn Servo_ImportRule_GetSheet(rule: RawServoImportRuleBorrowed) -> *const RawServoStyleSheet {
