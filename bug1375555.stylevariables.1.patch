# HG changeset patch
# User Fernando Jimenez Moreno <ferjmoreno@gmail.com>
# Parent  5b6d5747243ae7b8c9038402ca282344a254befc
Bug 1375555 - Part 3: Implement indexed getter for custom property names. r?emilio

diff --git a/layout/style/ServoBindingList.h b/layout/style/ServoBindingList.h
--- a/layout/style/ServoBindingList.h
+++ b/layout/style/ServoBindingList.h
@@ -548,16 +548,20 @@ SERVO_BINDING_FUNC(Servo_SerializeFontVa
 // Get custom property value.
 SERVO_BINDING_FUNC(Servo_GetCustomPropertyValue, bool,
                    ServoComputedValuesBorrowed computed_values,
                    const nsAString* name, nsAString* value)
 
 SERVO_BINDING_FUNC(Servo_GetCustomPropertiesCount, uint32_t,
                    ServoComputedValuesBorrowed computed_values)
 
+SERVO_BINDING_FUNC(Servo_GetCustomPropertyNameAt, bool,
+                   ServoComputedValuesBorrowed, uint32_t index,
+                   nsAString* name)
+
 // Style-struct management.
 #define STYLE_STRUCT(name, checkdata_cb)                            \
   struct nsStyle##name;                                             \
   SERVO_BINDING_FUNC(Servo_GetStyle##name, const nsStyle##name*,  \
                      ServoComputedValuesBorrowedOrNull computed_values)
 #include "nsStyleStructList.h"
 #undef STYLE_STRUCT
 
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -1067,21 +1067,36 @@ nsComputedDOMStyle::IndexedGetter(uint32
   // Custom properties are exposed with indexed properties just after all
   // of the built-in properties.
   UpdateCurrentStyleSources(false);
   if (!mStyleContext) {
     aFound = false;
     return;
   }
 
-  const nsStyleVariables* variables = StyleVariables();
-  if (aIndex - length < variables->mVariables.Count()) {
+  bool isServo = mStyleContext->IsServo();
+
+  const nsStyleVariables* variables = isServo
+    ? StyleVariables()
+    : nullptr;
+
+  const uint32_t count = isServo
+    ? Servo_GetCustomPropertiesCount(mStyleContext->ComputedValues())
+    : variables->mVariables.Count();
+
+  const uint32_t index = aIndex - length;
+  if (index < count) {
     aFound = true;
     nsString varName;
-    variables->mVariables.GetVariableAt(aIndex - length, varName);
+    if (isServo) {
+      Servo_GetCustomPropertyNameAt(mStyleContext->ComputedValues(),
+                                    index, &varName);
+    } else {
+      variables->mVariables.GetVariableAt(index, varName);
+    }
     aPropName.AssignLiteral("--");
     aPropName.Append(varName);
   } else {
     aFound = false;
   }
 
   ClearCurrentStyleSources();
 }
diff --git a/servo/components/style/custom_properties.rs b/servo/components/style/custom_properties.rs
--- a/servo/components/style/custom_properties.rs
+++ b/servo/components/style/custom_properties.rs
@@ -130,16 +130,27 @@ impl CustomPropertiesMap {
         if self.index.contains(name) {
             debug_assert!(self.values.contains_key(name));
             self.values.get(name)
         } else {
             None
         }
     }
 
+    /// Get the name of a custom property given its list index.
+    pub fn get_name_at(&self, index: u32) -> Option<&Name>
+    {
+        let index = index as usize;
+        if index >= self.len() {
+            return None;
+        }
+
+        Some(&self.index[index])
+    }
+
     /// Get an iterator for custom properties computed values.
     pub fn iter(&self) -> hash_map::Iter<Name, ComputedValue> {
         self.values.iter()
     }
 
     /// Get the count of custom properties computed values.
     pub fn len(&self) -> usize {
         debug_assert!(self.values.len() == self.index.len());
diff --git a/servo/ports/geckolib/glue.rs b/servo/ports/geckolib/glue.rs
--- a/servo/ports/geckolib/glue.rs
+++ b/servo/ports/geckolib/glue.rs
@@ -3123,17 +3123,18 @@ pub extern "C" fn Servo_StyleSet_MightHa
 pub extern "C" fn Servo_StyleSet_HasStateDependency(raw_data: RawServoStyleSetBorrowed,
                                                     state: u64) -> bool {
     let data = PerDocumentStyleData::from_ffi(raw_data).borrow();
     data.stylist.might_have_state_dependency(ElementState::from_bits_truncate(state))
 }
 
 #[no_mangle]
 pub extern "C" fn Servo_GetCustomPropertyValue(computed_values: ServoComputedValuesBorrowed,
-                                               name: *const nsAString, value: *mut nsAString) -> bool {
+                                               name: *const nsAString,
+                                               value: *mut nsAString) -> bool {
     let custom_properties = match ComputedValues::as_arc(&computed_values).custom_properties() {
         Some(p) => p,
         None => return false,
     };
 
     let name = unsafe { Atom::from((&*name)) };
     let computed_value = match custom_properties.get_computed_value(&name) {
         Some(v) => v,
@@ -3146,8 +3147,26 @@ pub extern "C" fn Servo_GetCustomPropert
 
 #[no_mangle]
 pub extern "C" fn Servo_GetCustomPropertiesCount(computed_values: ServoComputedValuesBorrowed) -> u32 {
     match ComputedValues::as_arc(&computed_values).custom_properties() {
         Some(p) => p.len() as u32,
         None => 0,
     }
 }
+
+#[no_mangle]
+pub extern "C" fn Servo_GetCustomPropertyNameAt(computed_values: ServoComputedValuesBorrowed,
+                                                index: u32, name: *mut nsAString) -> bool {
+    let custom_properties = match ComputedValues::as_arc(&computed_values).custom_properties() {
+        Some(p) => p,
+        None => return false,
+    };
+
+    let name = unsafe { name.as_mut().unwrap() };
+    let property_name = match custom_properties.get_name_at(index) {
+        Some(n) => n,
+        None => return false,
+    };
+    name.assign_utf8(&property_name.to_string());
+
+    true
+}
