# HG changeset patch
# User Fernando Jimenez Moreno <ferjmoreno@gmail.com>
# Parent  6491fb29e7fcc9e02cc179ae2856f426a3552385
Bug 1370501 - stylo: Implement ServoStyleRule::GetSpecificity. r?emilio

diff --git a/layout/style/ServoBindingList.h b/layout/style/ServoBindingList.h
--- a/layout/style/ServoBindingList.h
+++ b/layout/style/ServoBindingList.h
@@ -145,16 +145,19 @@ SERVO_BINDING_FUNC(Servo_StyleRule_GetSt
 SERVO_BINDING_FUNC(Servo_StyleRule_SetStyle, void,
                    RawServoStyleRuleBorrowed rule,
                    RawServoDeclarationBlockBorrowed declarations)
 SERVO_BINDING_FUNC(Servo_StyleRule_GetSelectorText, void,
                    RawServoStyleRuleBorrowed rule, nsAString* result)
 SERVO_BINDING_FUNC(Servo_StyleRule_GetSelectorTextFromIndex, void,
                    RawServoStyleRuleBorrowed rule, uint32_t index,
                    nsAString* result)
+SERVO_BINDING_FUNC(Servo_StyleRule_GetSpecificityFromIndex, void,
+                   RawServoStyleRuleBorrowed rule, uint32_t index,
+                   uint64_t* specificity)
 SERVO_BINDING_FUNC(Servo_StyleRule_GetSelectorCount, void,
                    RawServoStyleRuleBorrowed rule, uint32_t* count)
 SERVO_BINDING_FUNC(Servo_ImportRule_GetHref, void,
                    RawServoImportRuleBorrowed rule, nsAString* result)
 SERVO_BINDING_FUNC(Servo_ImportRule_GetSheet, const RawServoStyleSheet*,
                    RawServoImportRuleBorrowed rule)
 SERVO_BINDING_FUNC(Servo_Keyframe_GetKeyText, void,
                    RawServoKeyframeBorrowed keyframe, nsAString* result)
diff --git a/layout/style/ServoStyleRule.cpp b/layout/style/ServoStyleRule.cpp
--- a/layout/style/ServoStyleRule.cpp
+++ b/layout/style/ServoStyleRule.cpp
@@ -264,17 +264,17 @@ ServoStyleRule::GetSelectorText(uint32_t
 {
   Servo_StyleRule_GetSelectorTextFromIndex(mRawRule, aSelectorIndex, &aText);
   return NS_OK;
 }
 
 nsresult
 ServoStyleRule::GetSpecificity(uint32_t aSelectorIndex, uint64_t* aSpecificity)
 {
-  // TODO Bug 1370501
+  Servo_StyleRule_GetSpecificityFromIndex(mRawRule, aSelectorIndex, aSpecificity);
   return NS_OK;
 }
 
 nsresult
 ServoStyleRule::SelectorMatchesElement(Element* aElement,
                                        uint32_t aSelectorIndex,
                                        const nsAString& aPseudo,
                                        bool* aMatches)
diff --git a/servo/components/selectors/parser.rs b/servo/components/selectors/parser.rs
--- a/servo/components/selectors/parser.rs
+++ b/servo/components/selectors/parser.rs
@@ -179,16 +179,25 @@ impl<Impl: SelectorImpl> SelectorList<Im
 
         first.selector.to_css(dest)?;
         for selector_and_hashes in iter {
             dest.write_str(", ")?;
             selector_and_hashes.selector.to_css(dest)?;
         }
         Ok(())
     }
+
+    pub fn specificity(&self, from_index: usize) -> u32 {
+        let mut result = 0;
+        let iter = self.0.iter().skip(from_index);
+        for selector_and_hashes in iter {
+            result += selector_and_hashes.selector.specificity();
+        }
+        result
+    }
 }
 
 /// Copied from Gecko, who copied it from WebKit. Note that increasing the
 /// number of hashes here will adversely affect the cache hit when fast-
 /// rejecting long lists of Rules with inline hashes.
 const NUM_ANCESTOR_HASHES: usize = 4;
 
 /// Ancestor hashes for the bloom filter. We precompute these and store them
diff --git a/servo/ports/geckolib/glue.rs b/servo/ports/geckolib/glue.rs
--- a/servo/ports/geckolib/glue.rs
+++ b/servo/ports/geckolib/glue.rs
@@ -1153,34 +1153,43 @@ pub extern "C" fn Servo_StyleRule_SetSty
 pub extern "C" fn Servo_StyleRule_GetSelectorText(rule: RawServoStyleRuleBorrowed, result: *mut nsAString) {
     read_locked_arc(rule, |rule: &StyleRule| {
         rule.selectors.to_css(unsafe { result.as_mut().unwrap() }).unwrap();
     })
 }
 
 #[no_mangle]
 pub extern "C" fn Servo_StyleRule_GetSelectorTextFromIndex(rule: RawServoStyleRuleBorrowed,
-                                                           aSelectorIndex: u32,
+                                                           from_index: u32,
                                                            result: *mut nsAString) {
     read_locked_arc(rule, |rule: &StyleRule| {
         rule.selectors.to_css_from_index(
-            aSelectorIndex as usize,
+            from_index as usize,
             unsafe { result.as_mut().unwrap() }
         ).unwrap();
     })
 }
 
 #[no_mangle]
 pub extern "C" fn Servo_StyleRule_GetSelectorCount(rule: RawServoStyleRuleBorrowed, count: *mut u32) {
     read_locked_arc(rule, |rule: &StyleRule| {
         *unsafe { count.as_mut().unwrap() } = rule.selectors.0.len() as u32;
     })
 }
 
 #[no_mangle]
+pub extern "C" fn Servo_StyleRule_GetSpecificityFromIndex(rule: RawServoStyleRuleBorrowed,
+                                                 from_index: u32,
+                                                 specificity: *mut u64) {
+    read_locked_arc(rule, |rule: &StyleRule| {
+        *unsafe { specificity.as_mut().unwrap() } = rule.selectors.specificity(from_index as usize) as u64;
+    })
+}
+
+#[no_mangle]
 pub extern "C" fn Servo_ImportRule_GetHref(rule: RawServoImportRuleBorrowed, result: *mut nsAString) {
     read_locked_arc(rule, |rule: &ImportRule| {
         write!(unsafe { &mut *result }, "{}", rule.url.as_str()).unwrap();
     })
 }
 
 #[no_mangle]
 pub extern "C" fn Servo_ImportRule_GetSheet(rule: RawServoImportRuleBorrowed) -> *const RawServoStyleSheet {
