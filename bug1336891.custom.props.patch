# HG changeset patch
# User Fernando Jimenez Moreno <ferjmoreno@gmail.com>
# Parent  464b2a3c25aa1065760d9ecbb0870bca4a66c62e
Bug 1336891 - stylo: Implement custom property value getter. r=emilio

diff --git a/layout/style/ServoBindingList.h b/layout/style/ServoBindingList.h
--- a/layout/style/ServoBindingList.h
+++ b/layout/style/ServoBindingList.h
@@ -536,16 +536,21 @@ SERVO_BINDING_FUNC(Servo_StyleSet_GetBas
                    const mozilla::ServoElementSnapshotTable* snapshots,
                    mozilla::CSSPseudoElementType pseudo_type)
 
 // For canvas font.
 SERVO_BINDING_FUNC(Servo_SerializeFontValueForCanvas, void,
                    RawServoDeclarationBlockBorrowed declarations,
                    nsAString* buffer)
 
+// Get custom property value.
+SERVO_BINDING_FUNC(Servo_GetCustomProperty, bool,
+                   ServoComputedValuesBorrowed computed_values,
+                   const nsAString* name, nsAString* value)
+
 // Style-struct management.
 #define STYLE_STRUCT(name, checkdata_cb)                            \
   struct nsStyle##name;                                             \
   SERVO_BINDING_FUNC(Servo_GetStyle##name, const nsStyle##name*,  \
                      ServoComputedValuesBorrowedOrNull computed_values)
 #include "nsStyleStructList.h"
 #undef STYLE_STRUCT
 
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -6908,22 +6908,24 @@ MarkComputedStyleMapDirty(const char* aP
   static_cast<nsComputedStyleMap*>(aData)->MarkDirty();
 }
 
 already_AddRefed<CSSValue>
 nsComputedDOMStyle::DoGetCustomProperty(const nsAString& aPropertyName)
 {
   MOZ_ASSERT(nsCSSProps::IsCustomPropertyName(aPropertyName));
 
-  const nsStyleVariables* variables = StyleVariables();
-
   nsString variableValue;
   const nsAString& name = Substring(aPropertyName,
                                     CSS_CUSTOM_NAME_PREFIX_LENGTH);
-  if (!variables->mVariables.Get(name, variableValue)) {
+  bool present = mStyleContext->IsServo() ?
+      Servo_GetCustomProperty(mStyleContext->ComputedValues(),
+                              &name, &variableValue) :
+      StyleVariables()->mVariables.Get(name, variableValue);
+  if (!present) {
     return nullptr;
   }
 
   RefPtr<nsROCSSPrimitiveValue> val = new nsROCSSPrimitiveValue;
   val->SetString(variableValue);
 
   return val.forget();
 }
diff --git a/servo/ports/geckolib/glue.rs b/servo/ports/geckolib/glue.rs
--- a/servo/ports/geckolib/glue.rs
+++ b/servo/ports/geckolib/glue.rs
@@ -3067,8 +3067,25 @@ pub extern "C" fn Servo_StyleSet_MightHa
 }
 
 #[no_mangle]
 pub extern "C" fn Servo_StyleSet_HasStateDependency(raw_data: RawServoStyleSetBorrowed,
                                                     state: u64) -> bool {
     let data = PerDocumentStyleData::from_ffi(raw_data).borrow();
     data.stylist.might_have_state_dependency(ElementState::from_bits_truncate(state))
 }
+
+#[no_mangle]
+pub extern "C" fn Servo_GetCustomProperty(computed_values: ServoComputedValuesBorrowed,
+                                          name: *const nsAString, value: *mut nsAString) -> bool {
+    match ComputedValues::as_arc(&computed_values).custom_properties() {
+        Some(custom_properties) => {
+            let name = unsafe { Atom::from((*name).to_string()) };
+            if let Some(computed_value) = custom_properties.get(&name) {
+                computed_value.to_css(unsafe { value.as_mut().unwrap() }).unwrap();
+                true
+            } else {
+                false
+            }
+        },
+        None => false,
+    }
+}
