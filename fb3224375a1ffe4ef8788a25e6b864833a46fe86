
# HG changeset patch
# User Fernando Jimenez Moreno <ferjmoreno@gmail.com>
# Date 1495191506 -7200
# Node ID fb3224375a1ffe4ef8788a25e6b864833a46fe86
# Parent  e8da7192201e5786614ec49d557e64dffd114ff2
Bug 1365674 - stylo: Simulate compute values failure for tests. r?hiro

MozReview-Commit-ID: KouduHcUrJJ

diff --git a/dom/animation/KeyframeUtils.cpp b/dom/animation/KeyframeUtils.cpp
--- a/dom/animation/KeyframeUtils.cpp
+++ b/dom/animation/KeyframeUtils.cpp
@@ -321,16 +321,17 @@ public:
 //
 // Inlined helper methods
 //
 // ------------------------------------------------------------------
 
 inline bool
 IsInvalidValuePair(const PropertyValuePair& aPair, StyleBackendType aBackend)
 {
+  printf_stderr("IsInvalidValuePair\n");
   if (aBackend == StyleBackendType::Servo) {
     return !aPair.mServoDeclarationBlock;
   }
 
   // There are three types of values we store as token streams:
   //
   // * Shorthand values (where we manually extract the token stream's string
   //   value) and pass that along to various parsing methods
@@ -385,17 +386,18 @@ AppendValueAsString(JSContext* aCx,
 static PropertyValuePair
 MakePropertyValuePair(nsCSSPropertyID aProperty, const nsAString& aStringValue,
                       nsCSSParser& aParser, nsIDocument* aDocument);
 
 static bool
 HasValidOffsets(const nsTArray<Keyframe>& aKeyframes);
 
 static void
-MarkAsComputeValuesFailureKey(PropertyValuePair& aPair);
+MarkAsComputeValuesFailureKey(PropertyValuePair& aPair,
+                              StyleBackendType aBackend);
 
 static bool
 IsComputeValuesFailureKey(const PropertyValuePair& aPair);
 
 static void
 BuildSegmentsFromValueEntries(nsTArray<KeyframeValueEntry>& aEntries,
                               nsTArray<AnimationProperty>& aResult);
 
@@ -622,16 +624,17 @@ KeyframeUtils::GetComputedKeyframeValues
     ComputedKeyframeValues* computedValues = result.AppendElement();
     for (const PropertyValuePair& pair :
            PropertyPriorityIterator(frame.mPropertyValues)) {
       MOZ_ASSERT(!pair.mServoDeclarationBlock,
                  "Animation values were parsed using Servo backend but target"
                  " element is not using Servo backend?");
 
       if (IsInvalidValuePair(pair, StyleBackendType::Gecko)) {
+        printf_stderr("YES IsInvalidValuePair\n");
         continue;
       }
 
       // Expand each value into the set of longhands and produce
       // a KeyframeValueEntry for each value.
       nsTArray<PropertyStyleAnimationValuePair> values;
 
       // For shorthands, we store the string as a token stream so we need to
@@ -862,31 +865,34 @@ ConvertKeyframeSequence(JSContext* aCx,
       JS::Rooted<JSObject*> object(aCx, &value.toObject());
       if (!GetPropertyValuesPairs(aCx, object,
                                   ListAllowance::eDisallow,
                                   propertyValuePairs)) {
         return false;
       }
     }
 
+    StyleBackendType styleBackend = aDocument->GetStyleBackendType();
+
     for (PropertyValuesPair& pair : propertyValuePairs) {
       MOZ_ASSERT(pair.mValues.Length() == 1);
       keyframe->mPropertyValues.AppendElement(
         MakePropertyValuePair(pair.mProperty, pair.mValues[0], parser,
                               aDocument));
 
       // When we go to convert keyframes into arrays of property values we
       // call StyleAnimation::ComputeValues. This should normally return true
       // but in order to test the case where it does not, BaseKeyframeDict
       // includes a chrome-only member that can be set to indicate that
       // ComputeValues should fail for shorthand property values on that
       // keyframe.
       if (nsCSSProps::IsShorthand(pair.mProperty) &&
           keyframeDict.mSimulateComputeValuesFailure) {
-        MarkAsComputeValuesFailureKey(keyframe->mPropertyValues.LastElement());
+        MarkAsComputeValuesFailureKey(keyframe->mPropertyValues.LastElement(),
+                                      styleBackend);
       }
     }
   }
 
   return true;
 }
 
 /**
@@ -1109,21 +1115,28 @@ HasValidOffsets(const nsTArray<Keyframe>
  * Takes a property-value pair for a shorthand property and modifies the
  * value to indicate that when we call StyleAnimationValue::ComputeValues on
  * that value we should behave as if that function had failed.
  *
  * @param aPair The PropertyValuePair to modify. |aPair.mProperty| must be
  *              a shorthand property.
  */
 static void
-MarkAsComputeValuesFailureKey(PropertyValuePair& aPair)
+MarkAsComputeValuesFailureKey(PropertyValuePair& aPair,
+                              StyleBackendType aBackend)
 {
   MOZ_ASSERT(nsCSSProps::IsShorthand(aPair.mProperty),
              "Only shorthand property values can be marked as failure values");
 
+  if (aBackend == StyleBackendType::Servo) {
+    printf_stderr("MarkAsComputeValuesFailureKey\n");
+    Servo_DeclarationBlock_SimulateComputeValuesFailure(aPair.mServoDeclarationBlock);
+    return;
+  }
+
   // We store shorthand values as nsCSSValueTokenStream objects whose mProperty
   // and mShorthandPropertyID are eCSSProperty_UNKNOWN and whose mTokenStream
   // member contains the shorthand property's value as a string.
   //
   // We need to leave mShorthandPropertyID as eCSSProperty_UNKNOWN so that
   // nsCSSValue::AppendToString returns the mTokenStream value, but we can
   // update mPropertyID to a special value to indicate that this is
   // a special failure sentinel.
@@ -1140,16 +1153,17 @@ MarkAsComputeValuesFailureKey(PropertyVa
  * value).
  *
  * @param aPair The property-value pair to test.
  * @return True if |aPair| represents a failure value.
  */
 static bool
 IsComputeValuesFailureKey(const PropertyValuePair& aPair)
 {
+  printf_stderr("IsComputeValuesFailureKey\n");
   return nsCSSProps::IsShorthand(aPair.mProperty) &&
          aPair.mValue.GetTokenStreamValue()->mPropertyID ==
            eCSSPropertyExtra_no_properties;
 }
 
 static void
 AppendInitialSegment(AnimationProperty* aAnimationProperty,
                      const KeyframeValueEntry& aFirstEntry)
@@ -1551,16 +1565,17 @@ RequiresAdditiveAnimation(const nsTArray
                             ? 1.0
                             : i == 0 ? 0.0 : 0.5;
     double offsetToUse = frame.mOffset
                          ? frame.mOffset.value()
                          : computedOffset;
 
     for (const PropertyValuePair& pair : frame.mPropertyValues) {
       if (IsInvalidValuePair(pair, styleBackend)) {
+        printf_stderr("YES IsInvalidValuePair\n");
         continue;
       }
 
       if (nsCSSProps::IsShorthand(pair.mProperty)) {
         if (styleBackend == StyleBackendType::Gecko) {
           nsCSSValueTokenStream* tokenStream =
             pair.mValue.GetTokenStreamValue();
           nsCSSParser parser(aDocument->CSSLoader());
diff --git a/layout/style/ServoBindingList.h b/layout/style/ServoBindingList.h
--- a/layout/style/ServoBindingList.h
+++ b/layout/style/ServoBindingList.h
@@ -367,16 +367,18 @@ SERVO_BINDING_FUNC(Servo_DeclarationBloc
                    RawServoDeclarationBlockBorrowed declarations,
                    const nsAString& value)
 SERVO_BINDING_FUNC(Servo_DeclarationBlock_SetTextDecorationColorOverride, void,
                    RawServoDeclarationBlockBorrowed declarations)
 SERVO_BINDING_FUNC(Servo_DeclarationBlock_SetBackgroundImage, void,
                    RawServoDeclarationBlockBorrowed declarations,
                    const nsAString& value,
                    RawGeckoURLExtraData* extra_data)
+SERVO_BINDING_FUNC(Servo_DeclarationBlock_SimulateComputeValuesFailure, void,
+                   RawServoDeclarationBlockBorrowed declarations)
 
 // MediaList
 SERVO_BINDING_FUNC(Servo_MediaList_Create, RawServoMediaListStrong)
 SERVO_BINDING_FUNC(Servo_MediaList_DeepClone, RawServoMediaListStrong,
                    RawServoMediaListBorrowed list)
 SERVO_BINDING_FUNC(Servo_MediaList_Matches, bool,
                    RawServoMediaListBorrowed list,
                    RawServoStyleSetBorrowed set)
diff --git a/servo/components/style/properties/declaration_block.rs b/servo/components/style/properties/declaration_block.rs
--- a/servo/components/style/properties/declaration_block.rs
+++ b/servo/components/style/properties/declaration_block.rs
@@ -63,16 +63,20 @@ pub struct PropertyDeclarationBlock {
     ///
     /// Only deduplicated declarations appear here.
     declarations: Vec<(PropertyDeclaration, Importance)>,
 
     /// The number of entries in `self.declaration` with `Importance::Important`
     important_count: usize,
 
     longhands: LonghandIdSet,
+
+    /// Flag used by Stylo tests to simulate a compute values failure.
+    #[cfg(feature = "gecko")]
+    compute_values_failure: bool,
 }
 
 /// Iterator for PropertyDeclaration to be generated from PropertyDeclarationBlock.
 #[derive(Clone)]
 pub struct PropertyDeclarationIterator<'a> {
     iter: Iter<'a, (PropertyDeclaration, Importance)>,
 }
 
@@ -96,36 +100,62 @@ impl fmt::Debug for PropertyDeclarationB
 }
 
 impl PropertyDeclarationBlock {
     /// Returns the number of declarations in the block.
     pub fn len(&self) -> usize {
         self.declarations.len()
     }
 
+    #[cfg(feature = "gecko")]
+    /// Create an empty block
+    pub fn new() -> Self {
+        PropertyDeclarationBlock {
+            declarations: Vec::new(),
+            important_count: 0,
+            longhands: LonghandIdSet::new(),
+            compute_values_failure: false,
+        }
+    }
+
+    #[cfg(not(feature = "gecko"))]
     /// Create an empty block
     pub fn new() -> Self {
         PropertyDeclarationBlock {
             declarations: Vec::new(),
             important_count: 0,
             longhands: LonghandIdSet::new(),
         }
     }
 
     /// Create a block with a single declaration
     pub fn with_one(declaration: PropertyDeclaration, importance: Importance) -> Self {
+        println!("with_one");
         let mut longhands = LonghandIdSet::new();
         if let PropertyDeclarationId::Longhand(id) = declaration.id() {
             longhands.insert(id);
         }
-        PropertyDeclarationBlock {
-            declarations: vec![(declaration, importance)],
-            important_count: if importance.important() { 1 } else { 0 },
-            longhands: longhands,
+        #[cfg(feature = "gecko")]
+        {
+            PropertyDeclarationBlock {
+                declarations: vec![(declaration, importance)],
+                important_count: if importance.important() { 1 } else { 0 },
+                longhands: longhands,
+                compute_values_failure: false,
+            }
         }
+
+        #[cfg(not(feature = "gecko"))]
+        {
+            PropertyDeclarationBlock {
+                declarations: vec![(declaration, importance)],
+                important_count: if importance.important() { 1 } else { 0 },
+                longhands: longhands,
+            }
+         }
     }
 
     /// The declarations in this block
     pub fn declarations(&self) -> &[(PropertyDeclaration, Importance)] {
         &self.declarations
     }
 
     /// Iterate over only PropertyDeclaration.
@@ -426,28 +456,42 @@ impl PropertyDeclarationBlock {
                 }
             }
         }
     }
 
     /// Convert AnimationValueMap to PropertyDeclarationBlock.
     #[cfg(feature = "gecko")]
     pub fn from_animation_value_map(animation_value_map: &AnimationValueMap) -> Self {
+        println!("from_animation_value_map");
         let mut declarations = vec![];
         let mut longhands = LonghandIdSet::new();
 
         for (property, animation_value) in animation_value_map.iter() {
           longhands.set_transition_property_bit(property);
           declarations.push((animation_value.uncompute(), Importance::Normal));
         }
 
-        PropertyDeclarationBlock {
-            declarations: declarations,
-            important_count: 0,
-            longhands: longhands,
+        #[cfg(feature = "gecko")]
+        {
+            PropertyDeclarationBlock {
+                declarations: declarations,
+                important_count: 0,
+                longhands: longhands,
+                compute_values_failure: false,
+            }
+        }
+
+        #[cfg(not(feature = "gecko"))]
+        {
+            PropertyDeclarationBlock {
+                declarations: declarations,
+                important_count: 0,
+                longhands: longhands,
+            }
         }
     }
 
     /// Returns true if the declaration block has a CSSWideKeyword for the given
     /// property.
     #[cfg(feature = "gecko")]
     pub fn has_css_wide_keyword(&self, property: &PropertyId) -> bool {
         if let PropertyId::Longhand(id) = *property {
@@ -455,16 +499,32 @@ impl PropertyDeclarationBlock {
                 return false
             }
         }
         self.declarations.iter().any(|&(ref decl, _)|
             decl.id().is_or_is_longhand_of(property) &&
             decl.get_css_wide_keyword().is_some()
         )
     }
+
+    /// Equivalent to Gecko's KeyframeUtils::MarkAsComputeValuesFailureKey.
+    /// Set the flag to simulate a compute values failure.
+    /// Used for Stylo tests only.
+    #[cfg(feature = "gecko")]
+    pub fn simulate_compute_values_failure(&mut self) {
+        self.compute_values_failure = true;
+    }
+
+    /// Equivalent to Gecko's KeyframeUtils::IsComputeValuesFailureKey.
+    /// Check if we should simulate a compute values failure.
+    /// Used for Stylo tests only.
+    #[cfg(feature = "gecko")]
+    pub fn is_compute_values_failure(&self) -> bool {
+        self.compute_values_failure == true
+    }
 }
 
 impl ToCss for PropertyDeclarationBlock {
     // https://drafts.csswg.org/cssom/#serialize-a-css-declaration-block
     fn to_css<W>(&self, dest: &mut W) -> fmt::Result
         where W: fmt::Write,
     {
         let mut is_first_serialization = true; // trailing serializations should have a prepended space
diff --git a/servo/ports/geckolib/glue.rs b/servo/ports/geckolib/glue.rs
--- a/servo/ports/geckolib/glue.rs
+++ b/servo/ports/geckolib/glue.rs
@@ -1670,16 +1670,24 @@ pub extern "C" fn Servo_DeclarationBlock
                                                            property: nsCSSPropertyID) -> bool {
     let property_id = get_property_id_from_nscsspropertyid!(property, false);
     read_locked_arc(declarations, |decls: &PropertyDeclarationBlock| {
         decls.has_css_wide_keyword(&property_id)
     })
 }
 
 #[no_mangle]
+pub extern "C" fn Servo_DeclarationBlock_SimulateComputeValuesFailure(
+    declarations: RawServoDeclarationBlockBorrowed) {
+    write_locked_arc(declarations, |decls: &mut PropertyDeclarationBlock| {
+        decls.simulate_compute_values_failure();
+    })
+}
+
+#[no_mangle]
 pub extern "C" fn Servo_MediaList_GetText(list: RawServoMediaListBorrowed, result: *mut nsAString) {
     read_locked_arc(list, |list: &MediaList| {
         list.to_css(unsafe { result.as_mut().unwrap() }).unwrap();
     })
 }
 
 #[no_mangle]
 pub extern "C" fn Servo_MediaList_SetText(list: RawServoMediaListBorrowed, text: *const nsACString) {
@@ -2378,16 +2386,23 @@ pub extern "C" fn Servo_GetComputedKeyfr
         let iter = keyframe.mPropertyValues.iter()
                                            .filter(|&property| !property.mServoDeclarationBlock.mRawPtr.is_null());
         let mut property_index = 0;
         for property in iter {
             let declarations = unsafe { &*property.mServoDeclarationBlock.mRawPtr.clone() };
             let declarations = Locked::<PropertyDeclarationBlock>::as_arc(&declarations);
             let guard = declarations.read_with(&guard);
 
+            if guard.is_compute_values_failure() {
+                println!("SKIP {:?}", property.mProperty);
+                continue;
+            } else {
+                println!("NOT SKIP {:?}", property.mProperty);
+            }
+
             let anim_iter = guard.declarations()
                             .iter()
                             .filter_map(|&(ref decl, imp)| {
                                 if imp == Importance::Normal {
                                     let property = TransitionProperty::from_declaration(decl);
                                     let animation = AnimationValue::from_declaration(decl, &mut context,
                                                                                      default_values);
                                     debug_assert!(property.is_none() == animation.is_none(),
