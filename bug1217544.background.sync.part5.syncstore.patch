# HG changeset patch
# User Fernando Jimenez <ferjmoreno@gmail.com>
# Parent  5c8cfb69c4025ec3d76b3e3bb16e825a9df0eea4
Bug 1217544 - Implement one-off BackgroundSync API. Part 5: Sync DB. r=baku

diff --git a/dom/sync/SyncRegistry.js b/dom/sync/SyncRegistry.js
new file mode 100644
--- /dev/null
+++ b/dom/sync/SyncRegistry.js
@@ -0,0 +1,97 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict"
+
+function debug(s) {
+  dump("DEBUG SyncRegistry: " + s + "\n");
+}
+
+const { interfaces: Ci, utils: Cu } = Components;
+
+Cu.import("resource://gre/modules/IndexedDBHelper.jsm");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+const SYNC_REGISTRY_DB_NAME    = "background-sync-registry";
+const SYNC_REGISTRY_DB_NAME    = 1;
+const SYNC_REGISTRY_STORE_NAME = "registry";
+
+let gInstance = null;
+function SyncRegistry() {
+  if (gInstance) {
+    return gInstance;
+  }
+  gInstance = this;
+  gInstance.init();
+  debug("SyncRegistry created");
+}
+
+SyncRegistry.prototype = {
+  __proto__: IndexedDBHelper.prototype,
+
+  init: function() {
+    debug("init");
+    this.initDBHelper(SYNC_REGISTRY_DB_NAME,
+                      SYNC_REGISTRY_DB_VERSION,
+                      [SYNC_REGISTRY_STORE_NAME]);
+  },
+
+  upgradeSchema: function(aTransaction, aDb, aOldVersion, aNewVersion) {
+    debug("upgradeSchema");
+    /**
+     * We will be storing objects like:
+     * {
+     *   id: <string> (key), // concatenation of origin + tag,
+     *   origin: <string> (index),
+     *   scope: <string>,
+     *   tag: <string>,
+     *   state: <number>,
+     *   lastChance: <boolean>
+     * }
+     */
+    let objectStore = aDb.createObjectStore(SYNC_REGISTRY_STORE_NAME, {
+      keyPath: "id"
+    });
+    objectStore.createIndex("origin", "origin", { unique: false });
+  },
+
+  add(aRegistration, aListener) {
+    debug("add");
+    aListener.notifyAddSuccess();
+  },
+
+  remove(aId, aListener) {
+    debug("remove");
+    aListener.notifyRemoveSuccess();
+  },
+
+  get(aId, aListener) {
+    debug("get");
+    aListener.notifyGetSuccess();
+  },
+
+  getAll(aOrigin, aListener) {
+    debug("getAll");
+  },
+
+  classID: Components.ID("{c1200834-3ebb-45e2-81cf-986edeb107f6}"),
+  contractID: "@mozilla.org/dom/sync/registry;1",
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsISyncRegistry,
+                                         Ci.nsISupports])
+};
+
+function SyncRegistration() {
+  this.state = Ci.nsISyncRegistry.STATE_PENDING;
+  this.lastChance = false;
+}
+
+SyncRegistration.prototype = {
+  classID: Components.ID("{0c47c0e6-66b9-4b91-b39e-65a7d11d322d}"),
+  contractID: "@mozilla.org/dom/sync/registration;1",
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsISyncRegistration,
+                                         Ci.nsISupports])
+};
+
+this.NSGetFactory = XPCOMUtils.generateNSGetFactory([SyncRegistry,
+                                                     SyncRegistration]);
diff --git a/dom/sync/SyncRegistry.manifest b/dom/sync/SyncRegistry.manifest
new file mode 100644
--- /dev/null
+++ b/dom/sync/SyncRegistry.manifest
@@ -0,0 +1,5 @@
+component {c1200834-3ebb-45e2-81cf-986edeb107f6} SyncRegistry.js
+contract @mozilla.org/dom/sync/registry;1 {c1200834-3ebb-45e2-81cf-986edeb107f6}
+
+component {0c47c0e6-66b9-4b91-b39e-65a7d11d322d} SyncRegistry.js
+contract @mozilla.org/dom/sync/registration;1 {0c47c0e6-66b9-4b91-b39e-65a7d11d322d}
diff --git a/dom/sync/moz.build b/dom/sync/moz.build
--- a/dom/sync/moz.build
+++ b/dom/sync/moz.build
@@ -17,11 +17,22 @@ IPDL_SOURCES += [
     'PSyncManager.ipdl',
     'SyncIPCTypes.ipdlh'
 ]
 
 LOCAL_INCLUDES += [
     '/dom/workers'
 ]
 
+XPIDL_SOURCES += [
+    'nsISyncRegistry.idl'
+]
+
+XPIDL_MODULE = 'dom_sync'
+
+EXTRA_COMPONENTS += [
+    'SyncRegistry.js',
+    'SyncRegistry.manifest'
+]
+
 include('/ipc/chromium/chromium-config.mozbuild')
 
 FINAL_LIBRARY = 'xul'
diff --git a/dom/sync/nsISyncRegistry.idl b/dom/sync/nsISyncRegistry.idl
new file mode 100644
--- /dev/null
+++ b/dom/sync/nsISyncRegistry.idl
@@ -0,0 +1,52 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsISupports.idl"
+
+[scriptable, uuid(671ea934-232d-47c6-87ba-b72715088914)]
+interface nsISyncRegistration : nsISupports
+{
+  attribute DOMString id;
+  attribute DOMString origin;
+  attribute DOMString scope;
+  attribute DOMString tag;
+  attribute unsigned short state; // "pending" by default
+  attribute boolean lastChance;
+};
+
+[scriptable, uuid(3084a211-3ef4-4fa3-8a20-dab42f062571)]
+interface nsISyncRegistryListener : nsISupports
+{
+  attribute nsID requestId;
+  attribute unsigned long long actorId;
+
+  void notifyAddSuccess();
+  void notifyRemoveSuccess();
+  void notifyGetSuccess([optional] in nsISyncRegistration registration);
+  void notifyGetAllSuccess([array, size_is(count)]
+                           in nsISyncRegistration registrations,
+                           in uint32_t count);
+  void notifyError(in DOMString error);
+};
+
+[scriptable, uuid(dfcc3fb2-f40d-44f9-85ea-1127be79fbe9)]
+interface nsISyncRegistry : nsISupports
+{
+  const unsigned short STATE_PENDING                    = 1;
+  const unsigned short STATE_WAITING                    = 2;
+  const unsigned short STATE_FIRING                     = 3;
+  const unsigned short STATE_REREGISTERING_WHILE_FIRING = 4;
+
+  void add(in nsISyncRegistration registration,
+           in nsISyncRegistryListener listener);
+
+  void remove(in DOMString id,
+              in nsISyncRegistryListener listener);
+
+  void get(in DOMString id,
+           in nsISyncRegistryListener listener);
+
+  void getAll([optional] in DOMString origin,
+              in nsISyncRegistryListener listener);
+};
