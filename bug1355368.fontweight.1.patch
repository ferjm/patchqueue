# HG changeset patch
# User Fernando Jimenez Moreno <ferjmoreno@gmail.com>
# Parent  b266a8d8fd595b84a7d6218d7b8c6b7af0b5027c
Bug 1355368 - stylo: make font-weight descriptor in @font-face rule preserve keyword values. r?xidorn

diff --git a/servo/components/style/gecko/rules.rs b/servo/components/style/gecko/rules.rs
--- a/servo/components/style/gecko/rules.rs
+++ b/servo/components/style/gecko/rules.rs
@@ -10,32 +10,43 @@ use computed_values::font_family::Family
 use counter_style;
 use cssparser::UnicodeRange;
 use font_face::{FontFaceRuleData, Source, FontDisplay};
 use gecko_bindings::bindings;
 use gecko_bindings::structs::{self, nsCSSFontFaceRule, nsCSSValue};
 use gecko_bindings::structs::{nsCSSCounterDesc, nsCSSCounterStyleRule};
 use gecko_bindings::sugar::ns_css_value::ToNsCssValue;
 use gecko_bindings::sugar::refptr::{RefPtr, UniqueRefPtr};
+use properties::longhands::font_weight::SpecifiedValue as FontWeight;
 use shared_lock::{ToCssWithGuard, SharedRwLockReadGuard};
 use std::{fmt, str};
 use values::generics::FontSettings;
 
 /// A @font-face rule
 pub type FontFaceRule = RefPtr<nsCSSFontFaceRule>;
 
 impl ToNsCssValue for FamilyName {
     fn convert(self, nscssvalue: &mut nsCSSValue) {
         nscssvalue.set_string_from_atom(&self.name)
     }
 }
 
 impl ToNsCssValue for font_weight::T {
     fn convert(self, nscssvalue: &mut nsCSSValue) {
-        nscssvalue.set_integer(self as i32)
+        match self.keyword {
+            FontWeight::Normal =>
+                nscssvalue.set_enum(structs::NS_STYLE_FONT_WEIGHT_NORMAL as i32),
+            FontWeight::Bold =>
+                nscssvalue.set_enum(structs::NS_STYLE_FONT_WEIGHT_BOLD as i32),
+            FontWeight::Bolder =>
+                nscssvalue.set_enum(structs::NS_STYLE_FONT_WEIGHT_BOLDER as i32),
+            FontWeight::Lighter =>
+                nscssvalue.set_enum(structs::NS_STYLE_FONT_WEIGHT_LIGHTER as i32),
+            _ => nscssvalue.set_integer(self.value as i32),
+        }
     }
 }
 
 impl ToNsCssValue for font_feature_settings::T {
     fn convert(self, nscssvalue: &mut nsCSSValue) {
         match self {
             FontSettings::Normal => nscssvalue.set_normal(),
             FontSettings::Tag(tags) => {
diff --git a/servo/components/style/properties/gecko.mako.rs b/servo/components/style/properties/gecko.mako.rs
--- a/servo/components/style/properties/gecko.mako.rs
+++ b/servo/components/style/properties/gecko.mako.rs
@@ -1772,25 +1772,26 @@ fn static_assert() {
         }
     }
 
     pub fn clone_font_size(&self) -> longhands::font_size::computed_value::T {
         Au(self.gecko.mSize)
     }
 
     pub fn set_font_weight(&mut self, v: longhands::font_weight::computed_value::T) {
-        self.gecko.mFont.weight = v as u16;
+        self.gecko.mFont.weight = v.value as u16;
     }
     ${impl_simple_copy('font_weight', 'mFont.weight')}
 
     pub fn clone_font_weight(&self) -> longhands::font_weight::computed_value::T {
         debug_assert!(self.gecko.mFont.weight >= 100);
         debug_assert!(self.gecko.mFont.weight <= 900);
         debug_assert!(self.gecko.mFont.weight % 10 == 0);
-        unsafe { transmute(self.gecko.mFont.weight) }
+        let value = unsafe { transmute(self.gecko.mFont.weight) };
+        longhands::font_weight::computed_value::T::from_gecko_weight(value)
     }
 
     ${impl_simple_type_with_conversion("font_synthesis", "mFont.synthesis")}
 
     pub fn set_font_size_adjust(&mut self, v: longhands::font_size_adjust::computed_value::T) {
         use properties::longhands::font_size_adjust::computed_value::T;
         match v {
             T::None => self.gecko.mFont.sizeAdjust = -1.0 as f32,
diff --git a/servo/components/style/properties/helpers/animated_properties.mako.rs b/servo/components/style/properties/helpers/animated_properties.mako.rs
--- a/servo/components/style/properties/helpers/animated_properties.mako.rs
+++ b/servo/components/style/properties/helpers/animated_properties.mako.rs
@@ -13,16 +13,18 @@ use euclid::{Point2D, Size2D};
 #[cfg(feature = "gecko")] use gecko_bindings::structs::RawGeckoGfxMatrix4x4;
 #[cfg(feature = "gecko")] use gecko_bindings::structs::nsCSSPropertyID;
 #[cfg(feature = "gecko")] use gecko_bindings::sugar::ownership::{HasFFI, HasSimpleFFI};
 #[cfg(feature = "gecko")] use gecko_string_cache::Atom;
 use properties::{CSSWideKeyword, PropertyDeclaration};
 use properties::longhands;
 use properties::longhands::background_size::computed_value::T as BackgroundSizeList;
 use properties::longhands::font_weight::computed_value::T as FontWeight;
+use properties::longhands::font_weight::computed_value::Weight as FontWeightEnum;
+use properties::longhands::font_weight::SpecifiedValue as FontWeightKeyword;
 use properties::longhands::font_stretch::computed_value::T as FontStretch;
 use properties::longhands::text_shadow::computed_value::T as TextShadowList;
 use properties::longhands::box_shadow::computed_value::T as BoxShadowList;
 use properties::longhands::transform::computed_value::ComputedMatrix;
 use properties::longhands::transform::computed_value::ComputedOperation as TransformOperation;
 use properties::longhands::transform::computed_value::T as TransformList;
 use properties::longhands::vertical_align::computed_value::T as VerticalAlign;
 use properties::longhands::visibility::computed_value::T as Visibility;
@@ -1341,48 +1343,78 @@ impl Animatable for MaxLength {
         }
     }
 }
 
 /// http://dev.w3.org/csswg/css-transitions/#animtype-font-weight
 impl Animatable for FontWeight {
     #[inline]
     fn add_weighted(&self, other: &Self, self_portion: f64, other_portion: f64) -> Result<Self, ()> {
-        let a = (*self as u32) as f64;
-        let b = (*other as u32) as f64;
+        let a = ((*self).value as u32) as f64;
+        let b = ((*other).value as u32) as f64;
         const NORMAL: f64 = 400.;
         let weight = (a - NORMAL) * self_portion + (b - NORMAL) * other_portion + NORMAL;
         Ok(if weight < 150. {
-            FontWeight::Weight100
+            FontWeight {
+                keyword: FontWeightKeyword::Weight100,
+                value: FontWeightEnum::Weight100,
+            }
         } else if weight < 250. {
-            FontWeight::Weight200
+            FontWeight {
+                keyword: FontWeightKeyword::Weight200,
+                value: FontWeightEnum::Weight200,
+            }
         } else if weight < 350. {
-            FontWeight::Weight300
+            FontWeight {
+                keyword: FontWeightKeyword::Weight300,
+                value: FontWeightEnum::Weight300,
+            }
         } else if weight < 450. {
-            FontWeight::Weight400
+            FontWeight {
+                keyword: FontWeightKeyword::Weight400,
+                value: FontWeightEnum::Weight400,
+            }
         } else if weight < 550. {
-            FontWeight::Weight500
+            FontWeight {
+                keyword: FontWeightKeyword::Weight500,
+                value: FontWeightEnum::Weight500,
+            }
         } else if weight < 650. {
-            FontWeight::Weight600
+            FontWeight {
+                keyword: FontWeightKeyword::Weight600,
+                value: FontWeightEnum::Weight600,
+            }
         } else if weight < 750. {
-            FontWeight::Weight700
+            FontWeight {
+                keyword: FontWeightKeyword::Weight700,
+                value: FontWeightEnum::Weight700,
+            }
         } else if weight < 850. {
-            FontWeight::Weight800
+            FontWeight {
+                keyword: FontWeightKeyword::Weight800,
+                value: FontWeightEnum::Weight800,
+            }
         } else {
-            FontWeight::Weight900
+            FontWeight {
+                keyword: FontWeightKeyword::Weight900,
+                value: FontWeightEnum::Weight900,
+            }
         })
     }
 
     #[inline]
-    fn get_zero_value(&self) -> Option<Self> { Some(FontWeight::Weight400) }
+    fn get_zero_value(&self) -> Option<Self> { Some(FontWeight {
+        keyword: FontWeightKeyword::Normal,
+        value: FontWeightEnum::Weight400,
+    }) }
 
     #[inline]
     fn compute_distance(&self, other: &Self) -> Result<f64, ()> {
-        let a = (*self as u32) as f64;
-        let b = (*other as u32) as f64;
+        let a = ((*self).value as u32) as f64;
+        let b = ((*other).value as u32) as f64;
         a.compute_distance(&b)
     }
 }
 
 /// https://drafts.csswg.org/css-fonts/#font-stretch-prop
 impl Animatable for FontStretch {
     #[inline]
     fn add_weighted(&self, other: &Self, self_portion: f64, other_portion: f64)
diff --git a/servo/components/style/properties/longhand/font.mako.rs b/servo/components/style/properties/longhand/font.mako.rs
--- a/servo/components/style/properties/longhand/font.mako.rs
+++ b/servo/components/style/properties/longhand/font.mako.rs
@@ -491,122 +491,172 @@ macro_rules! impl_gecko_keyword_from_tra
         }
     }
 
     /// Used in @font-face, where relative keywords are not allowed.
     impl Parse for computed_value::T {
         fn parse<'i, 't>(context: &ParserContext, input: &mut Parser<'i, 't>) -> Result<Self, ParseError<'i>> {
             match parse(context, input)? {
                 % for weight in range(100, 901, 100):
-                    SpecifiedValue::Weight${weight} => Ok(computed_value::T::Weight${weight}),
+                    SpecifiedValue::Weight${weight} => Ok(computed_value::T {
+                        keyword: SpecifiedValue::Weight${weight},
+                        value: computed_value::Weight::Weight${weight},
+                    }),
                 % endfor
-                SpecifiedValue::Normal => Ok(computed_value::T::Weight400),
-                SpecifiedValue::Bold => Ok(computed_value::T::Weight700),
+                SpecifiedValue::Normal => Ok(computed_value::T {
+                    keyword: SpecifiedValue::Normal,
+                    value: computed_value::Weight::Weight400,
+                }),
+                SpecifiedValue::Bold => Ok(computed_value::T {
+                    keyword: SpecifiedValue::Bold,
+                    value: computed_value::Weight::Weight700,
+                }),
                 SpecifiedValue::Bolder |
                 SpecifiedValue::Lighter => Err(StyleParseError::UnspecifiedError.into()),
                 SpecifiedValue::System(..) => unreachable!(),
             }
         }
     }
 
     pub mod computed_value {
         #[derive(PartialEq, Eq, Copy, Clone, Hash, Debug)]
         #[cfg_attr(feature = "servo", derive(HeapSizeOf, Deserialize, Serialize))]
         #[repr(u16)]
-        pub enum T {
+        pub enum Weight {
             % for weight in range(100, 901, 100):
                 Weight${weight} = ${weight},
             % endfor
         }
+
+        #[derive(PartialEq, Eq, Copy, Clone, Debug)]
+        #[cfg_attr(feature = "servo", derive(HeapSizeOf, Deserialize, Serialize))]
+        pub struct T {
+            pub keyword: super::SpecifiedValue,
+            pub value: Weight,
+        }
+
         impl T {
             #[inline]
             pub fn is_bold(self) -> bool {
-                match self {
-                    T::Weight900 | T::Weight800 |
-                    T::Weight700 | T::Weight600 => true,
+                match self.value {
+                    Weight::Weight900 | Weight::Weight800 |
+                    Weight::Weight700 | Weight::Weight600 => true,
                     _ => false
                 }
             }
 
             /// Obtain a Servo computed value from a Gecko computed font-weight
             pub fn from_gecko_weight(weight: u16) -> Self {
-                match weight {
-                    % for weight in range(100, 901, 100):
-                        ${weight} => T::Weight${weight},
-                    % endfor
-                    _ => panic!("from_gecko_weight: called with invalid weight")
+                Self {
+                    keyword: super::SpecifiedValue::from_gecko_keyword(weight as u32),
+                    value: match weight {
+                        % for weight in range(100, 901, 100):
+                            ${weight} => Weight::Weight${weight},
+                        % endfor
+                        _ => panic!("from_gecko_weight: called with invalid weight")
+                    }
                 }
             }
         }
     }
     impl ToCss for computed_value::T {
         fn to_css<W>(&self, dest: &mut W) -> fmt::Result where W: fmt::Write {
-            match *self {
+            match (*self).value {
                 % for weight in range(100, 901, 100):
-                    computed_value::T::Weight${weight} => dest.write_str("${weight}"),
+                    computed_value::Weight::Weight${weight} => dest.write_str("${weight}"),
                 % endfor
             }
         }
     }
     #[inline]
     pub fn get_initial_value() -> computed_value::T {
-        computed_value::T::Weight400  // normal
+        computed_value::T {
+            keyword: SpecifiedValue::Normal,
+            value: computed_value::Weight::Weight400,
+        }
     }
 
     #[inline]
     pub fn get_initial_specified_value() -> SpecifiedValue {
         SpecifiedValue::Normal
     }
 
     impl ToComputedValue for SpecifiedValue {
         type ComputedValue = computed_value::T;
 
         #[inline]
         fn to_computed_value(&self, context: &Context) -> computed_value::T {
             match *self {
                 % for weight in range(100, 901, 100):
-                    SpecifiedValue::Weight${weight} => computed_value::T::Weight${weight},
+                    SpecifiedValue::Weight${weight} => computed_value::T {
+                        keyword: SpecifiedValue::Weight${weight},
+                        value: computed_value::Weight::Weight${weight},
+                    },
                 % endfor
-                SpecifiedValue::Normal => computed_value::T::Weight400,
-                SpecifiedValue::Bold => computed_value::T::Weight700,
-                SpecifiedValue::Bolder => match context.inherited_style().get_font().clone_font_weight() {
-                    computed_value::T::Weight100 => computed_value::T::Weight400,
-                    computed_value::T::Weight200 => computed_value::T::Weight400,
-                    computed_value::T::Weight300 => computed_value::T::Weight400,
-                    computed_value::T::Weight400 => computed_value::T::Weight700,
-                    computed_value::T::Weight500 => computed_value::T::Weight700,
-                    computed_value::T::Weight600 => computed_value::T::Weight900,
-                    computed_value::T::Weight700 => computed_value::T::Weight900,
-                    computed_value::T::Weight800 => computed_value::T::Weight900,
-                    computed_value::T::Weight900 => computed_value::T::Weight900,
+                SpecifiedValue::Normal => computed_value::T {
+                    keyword: SpecifiedValue::Normal,
+                    value: computed_value::Weight::Weight400,
+                },
+                SpecifiedValue::Bold => computed_value::T {
+                    keyword: SpecifiedValue::Bold,
+                    value: computed_value::Weight::Weight700,
                 },
-                SpecifiedValue::Lighter => match context.inherited_style().get_font().clone_font_weight() {
-                    computed_value::T::Weight100 => computed_value::T::Weight100,
-                    computed_value::T::Weight200 => computed_value::T::Weight100,
-                    computed_value::T::Weight300 => computed_value::T::Weight100,
-                    computed_value::T::Weight400 => computed_value::T::Weight100,
-                    computed_value::T::Weight500 => computed_value::T::Weight100,
-                    computed_value::T::Weight600 => computed_value::T::Weight400,
-                    computed_value::T::Weight700 => computed_value::T::Weight400,
-                    computed_value::T::Weight800 => computed_value::T::Weight700,
-                    computed_value::T::Weight900 => computed_value::T::Weight700,
+                SpecifiedValue::Bolder => match context.inherited_style().get_font().clone_font_weight().value {
+                    computed_value::Weight::Weight100 |
+                    computed_value::Weight::Weight200 |
+                    computed_value::Weight::Weight300 => computed_value::T {
+                        keyword: SpecifiedValue::Bolder,
+                        value: computed_value::Weight::Weight400,
+                    },
+                    computed_value::Weight::Weight400 |
+                    computed_value::Weight::Weight500 => computed_value::T {
+                        keyword: SpecifiedValue::Bolder,
+                        value: computed_value::Weight::Weight700,
+                    },
+                    computed_value::Weight::Weight600 |
+                    computed_value::Weight::Weight700 |
+                    computed_value::Weight::Weight800 |
+                    computed_value::Weight::Weight900 => computed_value::T {
+                        keyword: SpecifiedValue::Bolder,
+                        value: computed_value::Weight::Weight900,
+                    },
+                },
+                SpecifiedValue::Lighter => match context.inherited_style().get_font().clone_font_weight().value {
+                    computed_value::Weight::Weight100 |
+                    computed_value::Weight::Weight200 |
+                    computed_value::Weight::Weight300 |
+                    computed_value::Weight::Weight400 |
+                    computed_value::Weight::Weight500 => computed_value::T {
+                        keyword: SpecifiedValue::Lighter,
+                        value: computed_value::Weight::Weight100
+                    },
+                    computed_value::Weight::Weight600 |
+                    computed_value::Weight::Weight700 => computed_value::T {
+                        keyword: SpecifiedValue::Lighter,
+                        value: computed_value::Weight::Weight400
+                    },
+                    computed_value::Weight::Weight800 |
+                    computed_value::Weight::Weight900 => computed_value::T {
+                        keyword: SpecifiedValue::Lighter,
+                        value: computed_value::Weight::Weight700
+                    },
                 },
                 SpecifiedValue::System(_) => {
                     <%self:nongecko_unreachable>
                         context.cached_system_font.as_ref().unwrap().font_weight.clone()
                     </%self:nongecko_unreachable>
                 }
             }
         }
 
         #[inline]
         fn from_computed_value(computed: &computed_value::T) -> Self {
-            match *computed {
+            match (*computed).value {
                 % for weight in range(100, 901, 100):
-                    computed_value::T::Weight${weight} => SpecifiedValue::Weight${weight},
+                    computed_value::Weight::Weight${weight} => SpecifiedValue::Weight${weight},
                 % endfor
             }
         }
     }
 </%helpers:longhand>
 
 <%helpers:longhand name="font-size" need_clone="True" animation_value_type="ComputedValue"
                    allow_quirks="True" spec="https://drafts.csswg.org/css-fonts/#propdef-font-size">
diff --git a/servo/components/style/style_adjuster.rs b/servo/components/style/style_adjuster.rs
--- a/servo/components/style/style_adjuster.rs
+++ b/servo/components/style/style_adjuster.rs
@@ -175,22 +175,25 @@ impl<'a, 'b: 'a> StyleAdjuster<'a, 'b> {
     }
 
     /// When mathvariant is not "none", font-weight and font-style are
     /// both forced to "normal".
     #[cfg(feature = "gecko")]
     fn adjust_for_mathvariant(&mut self) {
         use properties::longhands::_moz_math_variant::computed_value::T as moz_math_variant;
         use properties::longhands::font_style::computed_value::T as font_style;
-        use properties::longhands::font_weight::computed_value::T as font_weight;
+        use properties::longhands::font_weight as font_weight;
         if self.style.get_font().clone__moz_math_variant() != moz_math_variant::none {
             let mut font_style = self.style.mutate_font();
             // Sadly we don't have a nice name for the computed value
             // of "font-weight: normal".
-            font_style.set_font_weight(font_weight::Weight400);
+            font_style.set_font_weight(font_weight::computed_value::T {
+                keyword: font_weight::SpecifiedValue::Normal,
+                value: font_weight::computed_value::Weight::Weight400,
+            });
             font_style.set_font_style(font_style::normal);
         }
     }
 
     /// This implements an out-of-date spec. The new spec moves the handling of
     /// this to layout, which Gecko implements but Servo doesn't.
     ///
     /// See https://github.com/servo/servo/issues/15229
