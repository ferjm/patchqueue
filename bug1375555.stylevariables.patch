# HG changeset patch
# User Fernando Jimenez Moreno <ferjmoreno@gmail.com>
# Parent  a5ac011f185783624c351da0fc77e0922045779f
Bug 1375555 - Part 2: Get custom props count from Servo side for nsComputedDOMStyle::GetLength. r?emilio

diff --git a/layout/style/ServoBindingList.h b/layout/style/ServoBindingList.h
--- a/layout/style/ServoBindingList.h
+++ b/layout/style/ServoBindingList.h
@@ -541,20 +541,23 @@ SERVO_BINDING_FUNC(Servo_StyleSet_GetBas
                    mozilla::CSSPseudoElementType pseudo_type)
 
 // For canvas font.
 SERVO_BINDING_FUNC(Servo_SerializeFontValueForCanvas, void,
                    RawServoDeclarationBlockBorrowed declarations,
                    nsAString* buffer)
 
 // Get custom property value.
-SERVO_BINDING_FUNC(Servo_GetCustomProperty, bool,
+SERVO_BINDING_FUNC(Servo_GetCustomPropertyValue, bool,
                    ServoComputedValuesBorrowed computed_values,
                    const nsAString* name, nsAString* value)
 
+SERVO_BINDING_FUNC(Servo_GetCustomPropertiesCount, uint32_t,
+                   ServoComputedValuesBorrowed computed_values)
+
 // Style-struct management.
 #define STYLE_STRUCT(name, checkdata_cb)                            \
   struct nsStyle##name;                                             \
   SERVO_BINDING_FUNC(Servo_GetStyle##name, const nsStyle##name*,  \
                      ServoComputedValuesBorrowedOrNull computed_values)
 #include "nsStyleStructList.h"
 #undef STYLE_STRUCT
 
diff --git a/layout/style/nsComputedDOMStyle.cpp b/layout/style/nsComputedDOMStyle.cpp
--- a/layout/style/nsComputedDOMStyle.cpp
+++ b/layout/style/nsComputedDOMStyle.cpp
@@ -348,17 +348,19 @@ nsComputedDOMStyle::GetLength(uint32_t* 
   NS_PRECONDITION(aLength, "Null aLength!  Prepare to die!");
 
   uint32_t length = GetComputedStyleMap()->Length();
 
   // Make sure we have up to date style so that we can include custom
   // properties.
   UpdateCurrentStyleSources(false);
   if (mStyleContext) {
-    length += StyleVariables()->mVariables.Count();
+    length += mStyleContext->IsServo()
+      ? Servo_GetCustomPropertiesCount(mStyleContext->ComputedValues())
+      : StyleVariables()->mVariables.Count();
   }
 
   *aLength = length;
 
   ClearCurrentStyleSources();
 
   return NS_OK;
 }
@@ -6912,18 +6914,18 @@ already_AddRefed<CSSValue>
 nsComputedDOMStyle::DoGetCustomProperty(const nsAString& aPropertyName)
 {
   MOZ_ASSERT(nsCSSProps::IsCustomPropertyName(aPropertyName));
 
   nsString variableValue;
   const nsAString& name = Substring(aPropertyName,
                                     CSS_CUSTOM_NAME_PREFIX_LENGTH);
   bool present = mStyleContext->IsServo()
-    ? Servo_GetCustomProperty(mStyleContext->ComputedValues(),
-                              &name, &variableValue)
+    ? Servo_GetCustomPropertyValue(mStyleContext->ComputedValues(),
+                                   &name, &variableValue)
     : StyleVariables()->mVariables.Get(name, variableValue);
   if (!present) {
     return nullptr;
   }
 
   RefPtr<nsROCSSPrimitiveValue> val = new nsROCSSPrimitiveValue;
   val->SetString(variableValue);
 
diff --git a/servo/components/style/custom_properties.rs b/servo/components/style/custom_properties.rs
--- a/servo/components/style/custom_properties.rs
+++ b/servo/components/style/custom_properties.rs
@@ -134,16 +134,22 @@ impl CustomPropertiesMap {
             None
         }
     }
 
     /// Get an iterator for custom properties computed values.
     pub fn iter(&self) -> hash_map::Iter<Name, ComputedValue> {
         self.values.iter()
     }
+
+    /// Get the count of custom properties computed values.
+    pub fn len(&self) -> usize {
+        debug_assert!(self.values.len() == self.index.len());
+        self.values.len()
+    }
 }
 
 impl ComputedValue {
     fn empty() -> ComputedValue {
         ComputedValue {
             css: String::new(),
             last_token_type: TokenSerializationType::nothing(),
             first_token_type: TokenSerializationType::nothing(),
diff --git a/servo/ports/geckolib/glue.rs b/servo/ports/geckolib/glue.rs
--- a/servo/ports/geckolib/glue.rs
+++ b/servo/ports/geckolib/glue.rs
@@ -3122,24 +3122,32 @@ pub extern "C" fn Servo_StyleSet_MightHa
 #[no_mangle]
 pub extern "C" fn Servo_StyleSet_HasStateDependency(raw_data: RawServoStyleSetBorrowed,
                                                     state: u64) -> bool {
     let data = PerDocumentStyleData::from_ffi(raw_data).borrow();
     data.stylist.might_have_state_dependency(ElementState::from_bits_truncate(state))
 }
 
 #[no_mangle]
-pub extern "C" fn Servo_GetCustomProperty(computed_values: ServoComputedValuesBorrowed,
-                                          name: *const nsAString, value: *mut nsAString) -> bool {
+pub extern "C" fn Servo_GetCustomPropertyValue(computed_values: ServoComputedValuesBorrowed,
+                                               name: *const nsAString, value: *mut nsAString) -> bool {
     let custom_properties = match ComputedValues::as_arc(&computed_values).custom_properties() {
         Some(p) => p,
         None => return false,
     };
 
     let name = unsafe { Atom::from((&*name)) };
     let computed_value = match custom_properties.get_computed_value(&name) {
         Some(v) => v,
         None => return false,
     };
 
     computed_value.to_css(unsafe { value.as_mut().unwrap() }).unwrap();
     true
 }
+
+#[no_mangle]
+pub extern "C" fn Servo_GetCustomPropertiesCount(computed_values: ServoComputedValuesBorrowed) -> u32 {
+    match ComputedValues::as_arc(&computed_values).custom_properties() {
+        Some(p) => p.len() as u32,
+        None => 0,
+    }
+}
