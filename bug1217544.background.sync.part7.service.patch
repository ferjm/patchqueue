# HG changeset patch
# User Fernando Jimenez <ferjmoreno@gmail.com>
# Parent  92b87a74a4ef35ab0e26a256ae717bd3d9e655dd
Bug 1217544 - Implement one-off BackgroundSync API. Part 7: BackgroundSyncService. r=baku

diff --git a/dom/backgroundsync/BackgroundSyncParent.cpp b/dom/backgroundsync/BackgroundSyncParent.cpp
--- a/dom/backgroundsync/BackgroundSyncParent.cpp
+++ b/dom/backgroundsync/BackgroundSyncParent.cpp
@@ -1,25 +1,30 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "BackgroundSyncParent.h"
+#include "BackgroundSyncService.h"
 
 #include "mozilla/unused.h"
 #include "mozilla/ipc/BackgroundParent.h"
 
 namespace mozilla {
 
 using namespace ipc;
 
 namespace dom {
 
+namespace {
+  uint64_t sBackgroundSyncManagerParentId = 0;
+}
+
 class BackgroundSyncParent::PendingRequest final
 {
 public:
   NS_INLINE_DECL_REFCOUNTING(PendingRequest)
 
   explicit PendingRequest(const nsID& aRequestId,
                           const SyncOp& aOp)
     : mRequestId(aRequestId)
@@ -38,88 +43,92 @@ public:
 private:
   ~PendingRequest() {}
 
   nsID mRequestId;
   SyncOp mOp;
 };
 
 BackgroundSyncParent::BackgroundSyncParent(const PrincipalInfo& aPrincipalInfo)
+  : mService(BackgroundSyncService::GetOrCreate())
+  , mId(++sBackgroundSyncManagerParentId)
+  , mActorDestroyed(false)
 {
   AssertIsOnBackgroundThread();
 
   mStorageManagerIdFactory =
     StorageManagerIdFactory::Create(this, aPrincipalInfo);
+
+  mService->RegisterActor(this);
 }
 
 BackgroundSyncParent::~BackgroundSyncParent()
 {
   AssertIsOnBackgroundThread();
 }
 
 void
 BackgroundSyncParent::ActorDestroy(ActorDestroyReason aWhy)
 {
   AssertIsOnBackgroundThread();
+
+  mActorDestroyed = true;
+
+  if (mService) {
+    mService->UnregisterActor(this);
+  }
 }
 
-void
+bool
 BackgroundSyncParent::ExecuteRequest(const nsID& aRequestId,
                                      const SyncOp& aOp)
 {
   AssertIsOnBackgroundThread();
 
-  switch(aOp.mArgs().type()) {
-    case SyncOpArgs::TSyncRegisterArgs:
-    {
-      // XXX Do registration.
-      const SyncRegisterResponse response(true);
-      //const SyncOpError response(static_cast<uint32_t>(NS_ERROR_FAILURE));
-      Unused << SendResponse(aRequestId, response);
-      break;
-    }
-    case SyncOpArgs::TSyncGetTagsArgs:
-    {
-      //XXX Do GetTags.
-      nsTArray<nsString> tags;
-      const SyncGetTagsResponse response(tags);
-      Unused << SendResponse(aRequestId, response);
-      break;
-    }
-    default:
-    {
-      MOZ_CRASH("Unknown BackgroundSync request");
-    }
+  if (NS_WARN_IF(!mService)) {
+    return false;
   }
+
+  mService->Request(mId, mStorageManagerId, aRequestId, aOp);
+
+  return true;
 }
 
 bool
 BackgroundSyncParent::RecvRequest(const nsID& aRequestId,
                                   const SyncOp& aOp)
 {
   AssertIsOnBackgroundThread();
 
   // If we haven't created a StorageManagerId for this parent yet, we
   // queue the request.
   if (!mStorageManagerId) {
     RefPtr<PendingRequest> pendingRequest = new PendingRequest(aRequestId, aOp);
     mPendingRequests.AppendElement(pendingRequest);
     return true;
   }
 
-  ExecuteRequest(aRequestId, aOp);
-  return true;
+  return ExecuteRequest(aRequestId, aOp);
 }
 
 bool
 BackgroundSyncParent::RecvShutdown()
 {
   AssertIsOnBackgroundThread();
 
-  Unused << Send__delete__(this);
+  if (NS_WARN_IF(!mService)) {
+    return false;
+  }
+
+  mService->UnregisterActor(this);
+  mService = nullptr;
+
+  if (!mActorDestroyed) {
+    Unused << Send__delete__(this);
+  }
 
   return true;
 }
 
 void
 BackgroundSyncParent::OnStorageManagerIdCreated(
     StorageManagerId* aManagerId)
 {
diff --git a/dom/backgroundsync/BackgroundSyncParent.h b/dom/backgroundsync/BackgroundSyncParent.h
--- a/dom/backgroundsync/BackgroundSyncParent.h
+++ b/dom/backgroundsync/BackgroundSyncParent.h
@@ -18,41 +18,63 @@ namespace mozilla {
 
 namespace ipc {
   class BackgroundParentImpl;
   class PrincipalInfo;
 } // namespace ipc
 
 namespace dom {
 
+class BackgroundSyncService;
+
 class BackgroundSyncParent final : public PBackgroundSyncParent
                                  , StorageManagerIdFactory::Listener
 {
   friend class mozilla::ipc::BackgroundParentImpl;
   friend class CreateManagerIdRunnable;
 
 public:
   NS_INLINE_DECL_REFCOUNTING(BackgroundSyncParent)
 
   virtual bool RecvRequest(const nsID& aRequestId,
                            const SyncOp& aOp) override;
 
   virtual bool RecvShutdown() override;
+
+  uint64_t Id() const
+  {
+    return mId;
+  }
+
+  bool ActorDestroyed() const
+  {
+    return mActorDestroyed;
+  }
+
 private:
   BackgroundSyncParent(const PrincipalInfo& aPrincipalInfo);
   ~BackgroundSyncParent();
 
   virtual void ActorDestroy(ActorDestroyReason aWhy) override;
 
-  void ExecuteRequest(const nsID& aRequestId, const SyncOp& aOp);
+  bool ExecuteRequest(const nsID& aRequestId, const SyncOp& aOp);
 
   // StorageManagerId method
   virtual void
   OnStorageManagerIdCreated(StorageManagerId* aManagerId) override;
 
+  // BackgroundSyncParent objects keep BackgroundSyncService alive.
+  RefPtr<BackgroundSyncService> mService;
+
+  // The identifier will be used by the BackgroundSyncService to know
+  // which request belongs to which parent actor.
+  uint64_t mId;
+
+  bool mActorDestroyed;
+
   RefPtr<StorageManagerIdFactory> mStorageManagerIdFactory;
   // We use this Id to ensure that we have a single StorageManager
   // per principal.
   RefPtr<StorageManagerId> mStorageManagerId;
 
   class PendingRequest;
   nsTArray<RefPtr<PendingRequest>> mPendingRequests;
 };
diff --git a/dom/backgroundsync/BackgroundSyncService.cpp b/dom/backgroundsync/BackgroundSyncService.cpp
new file mode 100644
--- /dev/null
+++ b/dom/backgroundsync/BackgroundSyncService.cpp
@@ -0,0 +1,193 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+* file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/**
+ * This singleton object is kept alive by the BackgroundSyncParent and
+ * ServiceWorkerManagerParent instances.
+ *
+ * It proxies storage requests such as sync registrations and get tags
+ * coming from the DOM objects through the IPC actors and makes sure that
+ * the storage context is ready for them.
+ *
+ * It also observes online/offline state changes and triggers the appropriate
+ * `sync` events whenever is needed.
+ */
+
+#include "BackgroundSyncService.h"
+#include "StorageManager.h"
+
+namespace mozilla {
+namespace dom {
+
+namespace {
+  BackgroundSyncService* sInstance = nullptr;
+} // namespace
+
+// ----------------------------------------------------------------------------
+
+struct BackgroundSyncService::StorageManagerRef final
+{
+  explicit StorageManagerRef(const uint64_t aActorId,
+                             StorageManager* aStorageManager)
+    : mActorId(aActorId)
+    , mStorageManager(aStorageManager)
+  {}
+
+  uint64_t mActorId;
+  RefPtr<StorageManager> mStorageManager;
+};
+
+void
+BackgroundSyncService::AddStorageManagerRef(const nsID& aRequestId,
+                                            const uint64_t aActorId,
+                                            StorageManager* aStorageManager)
+{
+  StorageManagerRef* ref = new StorageManagerRef(aActorId, aStorageManager);
+  mStorageManagers.Put(aRequestId, ref);
+}
+
+void
+BackgroundSyncService::ReleaseStorageManagerRef(const nsID& aRequestId)
+{
+  // It is possible that we call OnRequestComplete before AddStorageManagerRef
+  if (!mStorageManagers.Contains(aRequestId)) {
+    return;
+  }
+  nsAutoPtr<StorageManagerRef> doomed;
+  mStorageManagers.RemoveAndForget(aRequestId, doomed);
+}
+
+void
+BackgroundSyncService::ReleaseStorageManagerRef(const uint64_t aActorId)
+{
+  for (auto iter = mStorageManagers.Iter(); !iter.Done(); iter.Next()) {
+    StorageManagerRef* ref;
+    mStorageManagers.Get(iter.Key(), &ref);
+    if (NS_WARN_IF(!ref)) {
+      continue;
+    }
+    if (ref->mActorId == aActorId) {
+      ref->mStorageManager = nullptr;
+      nsAutoPtr<StorageManagerRef> doomed;
+      mStorageManagers.RemoveAndForget(iter.Key(), doomed);
+    }
+  }
+}
+
+// ----------------------------------------------------------------------------
+
+BackgroundSyncService::BackgroundSyncService()
+  : mOnlineState(OnlineStateObserver::UNKNOWN)
+{
+  AssertIsOnBackgroundThread();
+
+  // sInstance is a raw BackgroundSyncService*.
+  MOZ_ASSERT(!sInstance);
+  sInstance = this;
+}
+
+BackgroundSyncService::~BackgroundSyncService()
+{
+  AssertIsOnBackgroundThread();
+  MOZ_ASSERT(sInstance == this);
+  MOZ_ASSERT(mBackgroundSyncActors.Count() == 0);
+
+  mOnlineStateObserver->Shutdown(this);
+
+  sInstance = nullptr;
+}
+
+// static
+already_AddRefed<BackgroundSyncService>
+BackgroundSyncService::GetOrCreate()
+{
+  AssertIsOnBackgroundThread();
+
+  RefPtr<BackgroundSyncService> instance = sInstance;
+  if (!instance) {
+    instance = new BackgroundSyncService();
+    instance->Init();
+  }
+  return instance.forget();
+}
+
+void
+BackgroundSyncService::Init()
+{
+  mOnlineStateObserver = OnlineStateObserver::Init(this);
+}
+
+void
+BackgroundSyncService::RegisterActor(BackgroundSyncParent* aParent)
+{
+  AssertIsOnBackgroundThread();
+  MOZ_ASSERT(aParent);
+  MOZ_ASSERT(!mBackgroundSyncActors.Contains(aParent));
+
+  mBackgroundSyncActors.PutEntry(aParent);
+}
+
+void
+BackgroundSyncService::UnregisterActor(BackgroundSyncParent* aParent)
+{
+  AssertIsOnBackgroundThread();
+  MOZ_ASSERT(aParent);
+  MOZ_ASSERT(mBackgroundSyncActors.Contains(aParent));
+
+  ReleaseStorageManagerRef(aParent->Id());
+  mBackgroundSyncActors.RemoveEntry(aParent);
+}
+
+void
+BackgroundSyncService::Request(const uint64_t aActorId,
+                               StorageManagerId* aManagerId,
+                               const nsID& aRequestId,
+                               const SyncOp& aOp)
+{
+  AssertIsOnBackgroundThread();
+
+  printf_stderr("BackgroundSyncService::Request\n");
+
+  RefPtr<StorageManager> manager;
+  nsresult rv = StorageManager::GetOrCreate(this,
+                                            aManagerId,
+                                            getter_AddRefs(manager));
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    // XXX Notify error to actor.
+    return;
+  }
+
+  AddStorageManagerRef(aRequestId, aActorId, manager);
+
+  printf_stderr("YAY\n");
+}
+
+void
+BackgroundSyncService::OnRequestComplete(const nsID& aRequestId)
+{
+  ReleaseStorageManagerRef(aRequestId);
+}
+
+/**
+ * OnlineStateObserver::Listener implementation.
+ */
+
+void
+BackgroundSyncService::OnOnlineStateChanged(
+    OnlineStateObserver::OnlineState aState)
+{
+  mOnlineState = aState;
+
+  if (mOnlineState != OnlineStateObserver::ONLINE) {
+    return;
+  }
+
+  // XXX If we are online we need to get the list of registered sync requests
+  //     to trigger the corresponding 'sync' events.
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/backgroundsync/BackgroundSyncService.h b/dom/backgroundsync/BackgroundSyncService.h
new file mode 100644
--- /dev/null
+++ b/dom/backgroundsync/BackgroundSyncService.h
@@ -0,0 +1,64 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+* You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_BackgroundSyncService_h
+#define mozilla_dom_BackgroundSyncService_h
+
+#include "OnlineStateObserver.h"
+
+namespace mozilla {
+namespace dom {
+
+class StorageManager;
+
+class BackgroundSyncService final : public OnlineStateObserver::Listener
+{
+  friend class StorageManager;
+
+public:
+  NS_INLINE_DECL_THREADSAFE_REFCOUNTING(BackgroundSyncService)
+
+  static already_AddRefed<BackgroundSyncService> GetOrCreate();
+
+  void RegisterActor(BackgroundSyncParent* aParent);
+  void UnregisterActor(BackgroundSyncParent* aParent);
+
+  void Request(const uint64_t aActorId,
+               StorageManagerId* aManagerId,
+               const nsID& aRequestId,
+               const SyncOp& aOp);
+
+private:
+  BackgroundSyncService();
+  ~BackgroundSyncService();
+
+  void Init();
+
+  void OnRequestComplete(const nsID& aRequestId);
+
+  void AddStorageManagerRef(const nsID& aRequestId,
+                            const uint64_t aActorId,
+                            StorageManager* aStorageManager);
+  void ReleaseStorageManagerRef(const nsID& aRequestId);
+  void ReleaseStorageManagerRef(const uint64_t aActorId);
+
+  struct StorageManagerRef;
+  nsClassHashtable<nsIDHashKey, StorageManagerRef> mStorageManagers;
+
+  nsTHashtable<nsRefPtrHashKey<BackgroundSyncParent>> mBackgroundSyncActors;
+
+  // OnlineStateObserver::Listener method
+  virtual void
+  OnOnlineStateChanged(OnlineStateObserver::OnlineState aState) override;
+
+  RefPtr<OnlineStateObserver> mOnlineStateObserver;
+  OnlineStateObserver::OnlineState mOnlineState;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_SyncService_h
diff --git a/dom/backgroundsync/StorageManager.cpp b/dom/backgroundsync/StorageManager.cpp
--- a/dom/backgroundsync/StorageManager.cpp
+++ b/dom/backgroundsync/StorageManager.cpp
@@ -46,17 +46,18 @@ public:
 // Singleton class to track StorageManager instances and ensure there is only
 // one for each unique StorageManagerId.
 class StorageManager::Factory
 {
 public:
   friend class StaticAutoPtr<StorageManager::Factory>;
 
   static nsresult
-  GetOrCreate(StorageManagerId* aManagerId,
+  GetOrCreate(BackgroundSyncService* aService,
+              StorageManagerId* aManagerId,
               StorageManager** aManagerOut)
   {
     AssertIsOnBackgroundThread();
 
     // Ensure there is a factory instance. This forces the Get() call
     // below to use the same factory.
     nsresult rv = MaybeCreateInstance();
     if (NS_WARN_IF(NS_FAILED(rv))) {
@@ -67,17 +68,17 @@ public:
     if (!ref) {
       nsCOMPtr<nsIThread> ioThread;
       rv = NS_NewNamedThread("BSyncIOThread",
                              getter_AddRefs(ioThread));
       if (NS_WARN_IF(NS_FAILED(rv))) {
         return rv;
       }
 
-      ref = new StorageManager(aManagerId, ioThread);
+      ref = new StorageManager(aService, aManagerId, ioThread);
 
       // There may be an old manager for this origin in the process of
       // cleaning up.  We need to tell the new manager about this so
       // that it won't actually start until the old manager is done.
       RefPtr<StorageManager> oldManager = Get(aManagerId, Closing);
       ref->Init(oldManager);
 
       MOZ_ASSERT(!sFactory->mManagerList.Contains(ref));
@@ -357,41 +358,47 @@ public:
     mManager->OnRequestComplete(mRequestId);
   }
 };
 
 // ---------------------------------------------------------------------------
 
 // static
 nsresult
-StorageManager::GetOrCreate(StorageManagerId* aManagerId,
+StorageManager::GetOrCreate(BackgroundSyncService* aService,
+                            StorageManagerId* aManagerId,
                             StorageManager** aManagerOut)
 {
   AssertIsOnBackgroundThread();
-  return Factory::GetOrCreate(aManagerId, aManagerOut);
+  return Factory::GetOrCreate(aService, aManagerId, aManagerOut);
 }
 
-StorageManager::StorageManager(StorageManagerId* aManagerId,
+StorageManager::StorageManager(BackgroundSyncService* aService,
+                               StorageManagerId* aManagerId,
                                nsIThread* aIOThread)
-  : mManagerId(aManagerId)
+  : mService(aService)
+  , mManagerId(aManagerId)
   , mIOThread(aIOThread)
   , mContext(nullptr)
   , mShuttingDown(false)
   , mState(Open)
 {
+  MOZ_ASSERT(mService);
   MOZ_ASSERT(mManagerId);
   MOZ_ASSERT(mIOThread);
 }
 
 StorageManager::~StorageManager()
 {
   NS_ASSERT_OWNINGTHREAD(StorageManager);
   MOZ_ASSERT(mState == Closing);
   MOZ_ASSERT(!mContext);
 
+  mService = nullptr;
+
 /*  nsCOMPtr<nsIThread> ioThread;
   mIOThread.swap(ioThread);
 
   // Don't spin the event loop in the destructor waiting for the thread to
   // shutdown. Defer this to the main thread, instead.
   MOZ_ALWAYS_SUCCEEDS(NS_DispatchToMainThread(
         NewRunnableMethod(ioThread, &nsIThread::Shutdown)));*/
 }
diff --git a/dom/backgroundsync/StorageManager.h b/dom/backgroundsync/StorageManager.h
--- a/dom/backgroundsync/StorageManager.h
+++ b/dom/backgroundsync/StorageManager.h
@@ -28,17 +28,18 @@ namespace dom {
  * until that request is completed or the actor requesting it is destroyed.
  */
 
 class StorageManager final
 {
 public:
   NS_INLINE_DECL_REFCOUNTING(StorageManager)
 
-  static nsresult GetOrCreate(StorageManagerId* aManagerId,
+  static nsresult GetOrCreate(BackgroundSyncService* aService,
+                              StorageManagerId* aManagerId,
                               StorageManager** aManagerOut);
 
   enum State
   {
     Open,
     Closing
   };
 
@@ -64,27 +65,30 @@ public:
   void ExecuteRequest(const nsID& aRequestId, const SyncOp& aOp);
 
 private:
   class BaseAction;
   class Factory;
   class GetTagsAction;
   class RegisterAction;
 
-  StorageManager(StorageManagerId* aManagerId, nsIThread* aIOThread);
+  StorageManager(BackgroundSyncService* aService,
+                 StorageManagerId* aManagerId,
+                 nsIThread* aIOThread);
   ~StorageManager();
 
   void Init(StorageManager* aOldManager);
   void Abort();
   void Shutdown();
 
   void MaybeAllowContextToClose();
 
   void OnRequestComplete(const nsID& aRequestId);
 
+  RefPtr<BackgroundSyncService> mService;
   RefPtr<StorageManagerId> mManagerId;
   nsCOMPtr<nsIThread> mIOThread;
 
   // Weak reference cleared by RemoveStorageContext() in StorageContext
   // destructor.
   StorageContext* MOZ_NON_OWNING_REF mContext;
 
   bool mShuttingDown;
diff --git a/dom/backgroundsync/moz.build b/dom/backgroundsync/moz.build
--- a/dom/backgroundsync/moz.build
+++ b/dom/backgroundsync/moz.build
@@ -6,16 +6,17 @@
 EXPORTS.mozilla.dom += [
     'BackgroundSync.h'
 ]
 
 UNIFIED_SOURCES += [
     'BackgroundSync.cpp',
     'BackgroundSyncChild.cpp',
     'BackgroundSyncParent.cpp',
+    'BackgroundSyncService.cpp',
     'DBAction.cpp',
     'DBConnection.cpp',
     'DBSchema.cpp',
     'OnlineStateObserver.cpp',
     'StorageAction.cpp',
     'StorageContext.cpp',
     'StorageManager.cpp',
     'StorageManagerId.cpp'
