# HG changeset patch
# User Fernando Jimenez <ferjmoreno@gmail.com>
# Parent  46da78bfeec1b2a9bf9a0fc881612e98b52339c0
Bug 1217544 - Implement one-off BackgroundSync API. Part 7: BackgroundSyncService. r=baku

diff --git a/dom/backgroundsync/BackgroundSyncChild.cpp b/dom/backgroundsync/BackgroundSyncChild.cpp
--- a/dom/backgroundsync/BackgroundSyncChild.cpp
+++ b/dom/backgroundsync/BackgroundSyncChild.cpp
@@ -108,16 +108,17 @@ BackgroundSyncChild::RecvResponse(const 
   Promise* p = GetPendingRequest(aRequestId);
   if (NS_WARN_IF(!p)) {
     // This should never happen.
     return false;
   }
 
   switch(aResponse.type()) {
     case SyncOpResponse::TSyncRegisterResponse:
+    case SyncOpResponse::TSyncRegisterOriginResponse:
       p->MaybeResolve(true);
       return true;
     case SyncOpResponse::TSyncGetTagsResponse:
       p->MaybeResolve(aResponse.get_SyncGetTagsResponse().mTags());
       return true;
     case SyncOpResponse::TSyncOpError:
       p->MaybeReject(
           static_cast<nsresult>(aResponse.get_SyncOpError().mCode()));
diff --git a/dom/backgroundsync/BackgroundSyncParent.cpp b/dom/backgroundsync/BackgroundSyncParent.cpp
--- a/dom/backgroundsync/BackgroundSyncParent.cpp
+++ b/dom/backgroundsync/BackgroundSyncParent.cpp
@@ -1,26 +1,31 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "BackgroundSyncParent.h"
+#include "BackgroundSyncService.h"
 
 #include "mozilla/unused.h"
 #include "mozilla/ipc/BackgroundParent.h"
 
 namespace mozilla {
 
 using namespace ipc;
 
 namespace dom {
 namespace backgroundsync {
 
+namespace {
+  uint64_t sBackgroundSyncManagerParentId = 1;
+}
+
 class BackgroundSyncParent::PendingRequest final
 {
 public:
   NS_INLINE_DECL_REFCOUNTING(PendingRequest)
 
   explicit PendingRequest(const nsID& aRequestId,
                           const SyncOp& aOp)
     : mRequestId(aRequestId)
@@ -39,76 +44,102 @@ public:
 private:
   ~PendingRequest() {}
 
   nsID mRequestId;
   SyncOp mOp;
 };
 
 BackgroundSyncParent::BackgroundSyncParent(const PrincipalInfo& aPrincipalInfo)
+  : mService(BackgroundSyncService::GetOrCreate())
+  , mId(++sBackgroundSyncManagerParentId)
+  , mActorDestroyed(false)
 {
   AssertIsOnBackgroundThread();
 
   mStorageManagerIdFactory =
     StorageManagerIdFactory::Create(this, aPrincipalInfo);
+
+  mService->RegisterActor(this);
 }
 
 BackgroundSyncParent::~BackgroundSyncParent()
 {
   AssertIsOnBackgroundThread();
 }
 
 void
 BackgroundSyncParent::ActorDestroy(ActorDestroyReason aWhy)
 {
   AssertIsOnBackgroundThread();
+
+  mActorDestroyed = true;
+
+  if (mService) {
+    mService->UnregisterActor(this);
+  }
 }
 
-void
+bool
 BackgroundSyncParent::ExecuteRequest(const nsID& aRequestId,
                                      const SyncOp& aOp)
 {
   AssertIsOnBackgroundThread();
+  
+  if (NS_WARN_IF(!mService)) {
+    return false;
+  }
 
-  // XXX
+  mService->Request(mId, mStorageManagerId, aRequestId, aOp);
+
+  return true;
 }
 
 bool
 BackgroundSyncParent::RecvRequest(const nsID& aRequestId,
                                   const SyncOp& aOp)
 {
   AssertIsOnBackgroundThread();
 
   // If we haven't created a StorageManagerId for this parent yet, we
   // queue the request.
   if (!mStorageManagerId) {
     RefPtr<PendingRequest> pendingRequest = new PendingRequest(aRequestId, aOp);
     mPendingRequests.AppendElement(pendingRequest);
     return true;
   }
 
-  ExecuteRequest(aRequestId, aOp);
-  return true;
+  return ExecuteRequest(aRequestId, aOp);
 }
 
 bool
 BackgroundSyncParent::RecvShutdown()
 {
   AssertIsOnBackgroundThread();
 
-  Unused << Send__delete__(this);
+  if (NS_WARN_IF(!mService)) {
+    return false;
+  }
+
+  mService->UnregisterActor(this);
+  mService = nullptr;
+
+  if (!mActorDestroyed) {
+    Unused << Send__delete__(this);
+  }
 
   return true;
 }
 
 void
 BackgroundSyncParent::OnStorageManagerIdCreated(
-    StorageManagerId* aManagerId)
+    StorageManagerId* aManagerId, StorageManagerIdFactory* aFactory)
 {
   MOZ_ASSERT(mStorageManagerIdFactory);
+  MOZ_ASSERT(mStorageManagerIdFactory == aFactory);
   MOZ_ASSERT(!mStorageManagerId);
 
   mStorageManagerId = aManagerId;
   mStorageManagerIdFactory->RemoveListener(this);
   mStorageManagerIdFactory = nullptr;
 
   // Flush pending requests.
   for (uint32_t i = 0, len = mPendingRequests.Length(); i < len; i++) {
diff --git a/dom/backgroundsync/BackgroundSyncParent.h b/dom/backgroundsync/BackgroundSyncParent.h
--- a/dom/backgroundsync/BackgroundSyncParent.h
+++ b/dom/backgroundsync/BackgroundSyncParent.h
@@ -19,16 +19,18 @@ namespace mozilla {
 namespace ipc {
   class BackgroundParentImpl;
   class PrincipalInfo;
 } // namespace ipc
 
 namespace dom {
 namespace backgroundsync {
 
+class BackgroundSyncService;
+
 class BackgroundSyncParent final : public PBackgroundSyncParent
                                  , StorageManagerIdFactory::Listener
 {
   friend class mozilla::ipc::BackgroundParentImpl;
   friend class CreateManagerIdRunnable;
 
 public:
   NS_INLINE_DECL_REFCOUNTING(BackgroundSyncParent)
@@ -36,27 +38,47 @@ public:
   virtual bool RecvRequest(const nsID& aRequestId,
                            const SyncOp& aOp) override;
 
   virtual bool RecvShutdown() override;
 
   void NotifyResponse(const nsID& aRequestId,
                       const SyncOpResponse& aResponse);
 
+  uint64_t Id() const
+  {
+    return mId;
+  }
+
+  bool ActorDestroyed() const
+  {
+    return mActorDestroyed;
+  }
+
 private:
   BackgroundSyncParent(const PrincipalInfo& aPrincipalInfo);
   ~BackgroundSyncParent();
 
   virtual void ActorDestroy(ActorDestroyReason aWhy) override;
 
-  void ExecuteRequest(const nsID& aRequestId, const SyncOp& aOp);
+  bool ExecuteRequest(const nsID& aRequestId, const SyncOp& aOp);
 
   // StorageManagerId method
   virtual void
-  OnStorageManagerIdCreated(StorageManagerId* aManagerId) override;
+  OnStorageManagerIdCreated(StorageManagerId* aManagerId,
+                            StorageManagerIdFactory* aManagerIdFactory) override;
+
+  // BackgroundSyncParent objects keep BackgroundSyncService alive.
+  RefPtr<BackgroundSyncService> mService;
+
+  // The identifier will be used by the BackgroundSyncService to know
+  // which request belongs to which parent actor.
+  uint64_t mId;
+
+  bool mActorDestroyed;
 
   RefPtr<StorageManagerIdFactory> mStorageManagerIdFactory;
   // We use this Id to ensure that we have a single StorageManager
   // per principal.
   RefPtr<StorageManagerId> mStorageManagerId;
 
   class PendingRequest;
   nsTArray<RefPtr<PendingRequest>> mPendingRequests;
diff --git a/dom/backgroundsync/BackgroundSyncService.cpp b/dom/backgroundsync/BackgroundSyncService.cpp
new file mode 100644
--- /dev/null
+++ b/dom/backgroundsync/BackgroundSyncService.cpp
@@ -0,0 +1,500 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+* file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/**
+ * This singleton object is kept alive by the BackgroundSyncParent and
+ * ServiceWorkerManagerParent instances.
+ *
+ * It proxies storage requests such as sync registrations and get tags
+ * coming from the DOM objects through the IPC actors and makes sure that
+ * the storage context is ready for them.
+ *
+ * It also observes online/offline state changes and triggers the appropriate
+ * `sync` events whenever is needed.
+ */
+
+#include "BackgroundSyncService.h"
+#include "ChromeStorageManager.h"
+#include "StorageManager.h"
+
+#include "mozilla/ipc/BackgroundUtils.h"
+#include "nsContentUtils.h"
+
+namespace mozilla {
+namespace dom {
+namespace backgroundsync {
+
+namespace {
+  BackgroundSyncService* sInstance = nullptr;
+} // namespace
+
+// ----------------------------------------------------------------------------
+
+class GetAllRunnable final : public nsIRunnable
+                           , public nsICancelableRunnable
+{
+public:
+  NS_DECL_THREADSAFE_ISUPPORTS
+
+  GetAllRunnable(BackgroundSyncService* aService,
+                 const nsTArray<nsString>& aOrigins)
+    : mService(aService)
+    , mOrigins(aOrigins)
+    , mInitiatingThread(do_GetCurrentThread())
+  {
+  }
+
+  NS_IMETHODIMP
+  Run() override
+  {
+    if (mInitiatingThread == nsCOMPtr<nsIThread>(do_GetCurrentThread())) {
+      RefPtr<StorageManagerIdFactory> factory =
+        StorageManagerIdFactory::Create(mService, mPrincipalInfo);
+      mService->AddStorageManagerIdFactory(factory);
+      return NS_OK;
+    }
+
+    MOZ_ASSERT(NS_IsMainThread());
+
+    nsIScriptSecurityManager *securityManager =
+      nsContentUtils::GetSecurityManager();
+
+    MOZ_ASSERT(securityManager);
+
+    for (uint32_t i = 0; i < mOrigins.Length(); i++) {
+      // To do that, we first need to get the StorageManager responsible of
+      // each origin.
+      nsCOMPtr<nsIPrincipal> principal;
+      securityManager->CreateCodebasePrincipalFromOrigin(
+        NS_ConvertUTF16toUTF8(mOrigins[i]), getter_AddRefs(principal));
+
+      MOZ_ASSERT(principal);
+
+      nsresult rv = PrincipalToPrincipalInfo(principal, &mPrincipalInfo);
+      if (NS_WARN_IF(NS_FAILED(rv))) {
+        return rv;
+      }
+
+      rv = mInitiatingThread->Dispatch(this, nsIThread::DISPATCH_NORMAL);
+      if (NS_WARN_IF(NS_FAILED(rv))) {
+        return rv;
+      }
+    }
+
+    return NS_OK;
+  }
+
+  NS_IMETHODIMP
+  Cancel() override
+  {
+    return NS_OK;
+  }
+
+private:
+  ~GetAllRunnable() {}
+
+  RefPtr<BackgroundSyncService> mService;
+  nsTArray<nsString> mOrigins;
+  nsCOMPtr<nsIThread> mInitiatingThread;
+  PrincipalInfo mPrincipalInfo;
+};
+
+NS_IMPL_ISUPPORTS(GetAllRunnable, nsICancelableRunnable, nsIRunnable)
+
+// ----------------------------------------------------------------------------
+
+struct BackgroundSyncService::StorageManagerRef final
+{
+  explicit StorageManagerRef(const uint64_t aActorId,
+                             StorageManager* aStorageManager)
+    : mActorId(aActorId)
+    , mStorageManager(aStorageManager)
+  {}
+
+  uint64_t mActorId;
+  RefPtr<StorageManager> mStorageManager;
+};
+
+void
+BackgroundSyncService::AddStorageManagerRef(const nsID& aRequestId,
+                                            const uint64_t aActorId,
+                                            StorageManager* aStorageManager)
+{
+  StorageManagerRef* ref = new StorageManagerRef(aActorId, aStorageManager);
+  mStorageManagers.Put(aRequestId, ref);
+}
+
+uint64_t
+BackgroundSyncService::ReleaseStorageManagerRef(const nsID& aRequestId)
+{
+  // It is possible that we call OnRequestComplete before AddStorageManagerRef
+  if (!mStorageManagers.Contains(aRequestId)) {
+    return 0;
+  }
+  nsAutoPtr<StorageManagerRef> doomed;
+  StorageManagerRef* ref;
+  mStorageManagers.Get(aRequestId, &ref);
+  uint64_t actorId = ref->mActorId;
+  mStorageManagers.RemoveAndForget(aRequestId, doomed);
+  return actorId;
+}
+
+void
+BackgroundSyncService::ReleaseStorageManagerRef(const uint64_t aActorId)
+{
+  for (auto iter = mStorageManagers.Iter(); !iter.Done(); iter.Next()) {
+    StorageManagerRef* ref;
+    mStorageManagers.Get(iter.Key(), &ref);
+    if (NS_WARN_IF(!ref)) {
+      continue;
+    }
+    if (ref->mActorId == aActorId) {
+      ref->mStorageManager = nullptr;
+      nsAutoPtr<StorageManagerRef> doomed;
+      mStorageManagers.RemoveAndForget(iter.Key(), doomed);
+    }
+  }
+}
+
+// ----------------------------------------------------------------------------
+// ChromeStorageManager
+
+struct BackgroundSyncService::ChromeStorageManagerRef final
+{
+  explicit ChromeStorageManagerRef(ChromeStorageManager* aChromeStorageManager)
+    : mChromeStorageManager(aChromeStorageManager)
+  {}
+
+  RefPtr<ChromeStorageManager> mChromeStorageManager;
+};
+
+
+void
+BackgroundSyncService::AddChromeStorageManagerRef(
+    const nsID& aRequestId, ChromeStorageManager* aChromeStorageManager)
+{
+  ChromeStorageManagerRef* ref =
+    new ChromeStorageManagerRef(aChromeStorageManager);
+  mChromeStorageManagers.Put(aRequestId, ref);
+}
+
+void
+BackgroundSyncService::ReleaseChromeStorageManagerRef(const nsID& aRequestId)
+{
+  if (!mChromeStorageManagers.Contains(aRequestId)) {
+    return;
+  }
+  ChromeStorageManagerRef* ref;
+  mChromeStorageManagers.Get(aRequestId, &ref);
+  nsAutoPtr<ChromeStorageManagerRef> doomed;
+  mChromeStorageManagers.RemoveAndForget(aRequestId, doomed);
+}
+
+// ----------------------------------------------------------------------------
+
+
+BackgroundSyncService::BackgroundSyncService()
+  : mOnlineState(OnlineStateObserver::UNKNOWN)
+{
+  AssertIsOnBackgroundThread();
+
+  // sInstance is a raw BackgroundSyncService*.
+  MOZ_ASSERT(!sInstance);
+  sInstance = this;
+}
+
+BackgroundSyncService::~BackgroundSyncService()
+{
+  AssertIsOnBackgroundThread();
+  MOZ_ASSERT(sInstance == this);
+  MOZ_ASSERT(mBackgroundSyncActors.Count() == 0);
+  MOZ_ASSERT(mStorageManagers.Count() == 0);
+  MOZ_ASSERT(mChromeStorageManagers.Count() == 0);
+
+  mOnlineStateObserver->Shutdown(this);
+
+  sInstance = nullptr;
+}
+
+// static
+already_AddRefed<BackgroundSyncService>
+BackgroundSyncService::GetOrCreate()
+{
+  AssertIsOnBackgroundThread();
+
+  RefPtr<BackgroundSyncService> instance = sInstance;
+  if (!instance) {
+    instance = new BackgroundSyncService();
+    instance->Init();
+  }
+  return instance.forget();
+}
+
+void
+BackgroundSyncService::Init()
+{
+  mOnlineStateObserver = OnlineStateObserver::Init(this);
+}
+
+// --------------------------------------------------------------------------
+
+void
+BackgroundSyncService::RegisterActor(BackgroundSyncParent* aParent)
+{
+  AssertIsOnBackgroundThread();
+  MOZ_ASSERT(aParent);
+  MOZ_ASSERT(!mBackgroundSyncActors.Contains(aParent));
+
+  mBackgroundSyncActors.PutEntry(aParent);
+}
+
+void
+BackgroundSyncService::UnregisterActor(BackgroundSyncParent* aParent)
+{
+  AssertIsOnBackgroundThread();
+  MOZ_ASSERT(aParent);
+  MOZ_ASSERT(mBackgroundSyncActors.Contains(aParent));
+
+  ReleaseStorageManagerRef(aParent->Id());
+  mBackgroundSyncActors.RemoveEntry(aParent);
+}
+
+void
+BackgroundSyncService::RegisterActor(workers::ServiceWorkerManagerParent* aParent)
+{
+  AssertIsOnBackgroundThread();
+  MOZ_ASSERT(aParent);
+  MOZ_ASSERT(!mServiceWorkerManagerActors.Contains(aParent));
+
+  mServiceWorkerManagerActors.PutEntry(aParent);
+}
+
+void
+BackgroundSyncService::UnregisterActor(workers::ServiceWorkerManagerParent* aParent)
+{
+  AssertIsOnBackgroundThread();
+  MOZ_ASSERT(aParent);
+  MOZ_ASSERT(mServiceWorkerManagerActors.Contains(aParent));
+
+  mServiceWorkerManagerActors.RemoveEntry(aParent);
+}
+
+// --------------------------------------------------------------------------
+
+void
+BackgroundSyncService::Request(const uint64_t aActorId,
+                               StorageManagerId* aManagerId,
+                               const nsID& aRequestId,
+                               const SyncOp& aOp)
+{
+  AssertIsOnBackgroundThread();
+
+  RefPtr<StorageManager> manager;
+  nsresult rv = StorageManager::GetOrCreate(this,
+                                            aManagerId,
+                                            getter_AddRefs(manager));
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    return Response(aActorId, aRequestId,
+                    SyncOpError(static_cast<uint32_t>(NS_ERROR_UNEXPECTED)));
+  }
+
+  AddStorageManagerRef(aRequestId, aActorId, manager);
+
+  manager->ExecuteRequest(aRequestId, aOp);
+}
+
+void
+BackgroundSyncService::Response(const uint64_t aActorId,
+                                const nsID& aRequestId,
+                                const SyncOpResponse& aResponse)
+{
+  for (auto iter = mBackgroundSyncActors.Iter(); !iter.Done(); iter.Next()) {
+    RefPtr<BackgroundSyncParent> parent = iter.Get()->GetKey();
+    MOZ_ASSERT(parent);
+    if (parent->Id() != aActorId || parent->ActorDestroyed()) {
+      continue;
+    }
+    parent->NotifyResponse(aRequestId, aResponse);
+  }
+}
+
+void
+BackgroundSyncService::OnRequestComplete(const nsID& aRequestId,
+                                         const SyncOpResponse& aResponse)
+{
+  switch (aResponse.type()) {
+    case SyncOpResponse::TSyncRegisterResponse:
+      // If this is the first registration for this origin, we need to store
+      // it in the 'origins' db before we can progress the response to the
+      // DOM side.
+      if (aResponse.get_SyncRegisterResponse().mFirstRegistration()) {
+        RefPtr<ChromeStorageManager> manager =
+          ChromeStorageManager::GetOrCreate(this);
+        AddChromeStorageManagerRef(aRequestId, manager);
+        manager->Register(aRequestId,
+            aResponse.get_SyncRegisterResponse().mOrigin());
+        return;
+      }
+      break;
+    case SyncOpResponse::TSyncRemoveResponse:
+      {
+        nsString origin = aResponse.get_SyncRemoveResponse().mOrigin();
+        // We only get the origin value when there are no more registrations for
+        // this origin. If that's the case, we need to remove that origin from
+        // the 'origins' DB before we can progress the response to the DOM side.
+        if (origin.Length()) {
+          RefPtr<ChromeStorageManager> manager =
+            ChromeStorageManager::GetOrCreate(this);
+          AddChromeStorageManagerRef(aRequestId, manager);
+          manager->Unregister(aRequestId, origin);
+          return;
+        }
+      }
+      break;
+    default:
+      break;
+  }
+
+  uint64_t actorId = ReleaseStorageManagerRef(aRequestId);
+  // If we have an actor ID, this is a DOM request which response needs to be
+  // reported back to the content process through the IPC actor.
+  if (actorId != 0) {
+    return Response(actorId, aRequestId, aResponse);
+  }
+
+  // Otherwise, this is a response to an internal request that can be handled
+  // here.
+
+  ReleaseChromeStorageManagerRef(aRequestId);
+
+  // So far, we only care about GetAll and GetAllOrigins responses.
+  switch (aResponse.type()) {
+    case SyncOpResponse::TSyncGetAllResponse:
+      {
+        // If we went offline while getting the sync registrations, it is
+        // useless to continue, as no sync event will be triggered for these
+        // registrations. So we just bail out here.
+        if (mOnlineState !=  OnlineStateObserver::ONLINE) {
+          return;
+        }
+
+        // If we are still online, we try to trigger a sync event per each
+        // registration.
+        nsTArray<Registration> registrations(
+            aResponse.get_SyncGetAllResponse().mRegistrations());
+      }
+      break;
+    case SyncOpResponse::TSyncGetAllOriginsResponse:
+      {
+        // If we went offline while getting the origins, we don't care about
+        // getting the sync registrations anymore, so we bail out here.
+        if (mOnlineState !=  OnlineStateObserver::ONLINE) {
+          return;
+        }
+
+        // If we are still online, we need to get the list of sync registrations
+        // per origin.
+        nsTArray<nsString> origins(
+          aResponse.get_SyncGetAllOriginsResponse().mOrigins());
+        RefPtr<GetAllRunnable> runnable = new GetAllRunnable(this, origins);
+        MOZ_ALWAYS_SUCCEEDS(NS_DispatchToMainThread(runnable));
+      }
+      break;
+    default:
+      break;
+  }
+}
+
+// --------------------------------------------------------------------------
+
+/**
+ * OnlineStateObserver::Listener implementation.
+ */
+
+void
+BackgroundSyncService::OnOnlineStateChanged(
+    OnlineStateObserver::OnlineState aState)
+{
+  mOnlineState = aState;
+
+  if (mOnlineState != OnlineStateObserver::ONLINE) {
+    return;
+  }
+
+  // XXX If we are online we need to get the list of registered sync requests
+  //     to trigger the corresponding 'sync' events.
+
+  // XXX register requests somewhere once we have a mChromeStorageManager alive
+  //     only when there are active requests.
+  nsresult rv;
+  nsCOMPtr<nsIUUIDGenerator> uuidGenerator =
+    do_GetService("@mozilla.org/uuid-generator;1", &rv);
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    return;
+  }
+
+  nsID id;
+  rv = uuidGenerator->GenerateUUIDInPlace(&id);
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    return;
+  }
+
+  RefPtr<ChromeStorageManager> manager =
+    ChromeStorageManager::GetOrCreate(this);
+  AddChromeStorageManagerRef(id, manager);
+
+  manager->GetAll(id);
+}
+
+// --------------------------------------------------------------------------
+
+/**
+ * StorageManagerIdFactory::Listener implementation.
+ */
+void
+BackgroundSyncService::OnStorageManagerIdCreated(
+  StorageManagerId* aManagerId, StorageManagerIdFactory* aFactory)
+{
+  MOZ_ASSERT(mStorageManagerIdFactories.Contains(aFactory));
+
+  aFactory->RemoveListener(this);
+  mStorageManagerIdFactories.RemoveEntry(aFactory);
+
+  RefPtr<StorageManager> manager;
+  nsresult rv = StorageManager::GetOrCreate(this,
+                                            aManagerId,
+                                            getter_AddRefs(manager));
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    return;
+  }
+
+  nsCOMPtr<nsIUUIDGenerator> uuidGenerator =
+    do_GetService("@mozilla.org/uuid-generator;1", &rv);
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    return;
+  }
+
+  nsID id;
+  rv = uuidGenerator->GenerateUUIDInPlace(&id);
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    return;
+  }
+
+  AddStorageManagerRef(id, 0 /* internal request */, manager);
+
+  manager->ExecuteRequest(id, SyncInternalOp(SyncGetAllArgs()));
+}
+
+void
+BackgroundSyncService::AddStorageManagerIdFactory(
+    StorageManagerIdFactory* aFactory)
+{
+  mStorageManagerIdFactories.PutEntry(aFactory);
+}
+
+} // namespace backgroundsync
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/backgroundsync/BackgroundSyncService.h b/dom/backgroundsync/BackgroundSyncService.h
new file mode 100644
--- /dev/null
+++ b/dom/backgroundsync/BackgroundSyncService.h
@@ -0,0 +1,125 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+* You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_BackgroundSyncService_h
+#define mozilla_dom_BackgroundSyncService_h
+
+#include "ChromeStorageManager.h"
+#include "OnlineStateObserver.h"
+#include "StorageManagerId.h"
+
+#include "ServiceWorkerManagerParent.h"
+
+namespace mozilla {
+namespace dom {
+
+namespace workers {
+class ServiceWorkerManagerParent;
+} // namespace workers
+
+namespace backgroundsync {
+
+class BackgroundSyncParent;
+class StorageManager;
+class SyncOp;
+
+class BackgroundSyncService final : public OnlineStateObserver::Listener
+                                  , StorageManagerIdFactory::Listener
+{
+  friend class ChromeStorageManager;
+  friend class StorageManager;
+  friend class GetAllRunnable;
+
+public:
+  NS_INLINE_DECL_THREADSAFE_REFCOUNTING(BackgroundSyncService)
+
+  static already_AddRefed<BackgroundSyncService> GetOrCreate();
+
+  void RegisterActor(BackgroundSyncParent* aParent);
+  void UnregisterActor(BackgroundSyncParent* aParent);
+
+  void RegisterActor(workers::ServiceWorkerManagerParent* aParent);
+  void UnregisterActor(workers::ServiceWorkerManagerParent* aParent);
+
+  void Request(const uint64_t aActorId,
+               StorageManagerId* aManagerId,
+               const nsID& aRequestId,
+               const SyncOp& aOp);
+
+private:
+  BackgroundSyncService();
+  ~BackgroundSyncService();
+
+  void Init();
+
+  // --------------------------------------------------------------------------
+
+  void Response(const uint64_t aActorId,
+                const nsID& aRequestId,
+                const SyncOpResponse& aResponse);
+
+  void OnRequestComplete(const nsID& aRequestId,
+                         const SyncOpResponse& aResponse);
+
+  // --------------------------------------------------------------------------
+
+  nsTHashtable<nsRefPtrHashKey<BackgroundSyncParent>> mBackgroundSyncActors;
+  nsTHashtable<nsRefPtrHashKey<workers::ServiceWorkerManagerParent>>
+    mServiceWorkerManagerActors;
+
+  // --------------------------------------------------------------------------
+  // StorageManager
+
+  void AddStorageManagerRef(const nsID& aRequestId,
+                            const uint64_t aActorId,
+                            StorageManager* aStorageManager);
+  uint64_t ReleaseStorageManagerRef(const nsID& aRequestId);
+  void ReleaseStorageManagerRef(const uint64_t aActorId);
+
+  // References to StorageManagers managing content principals.
+  // For each content origin, we will have a separated registrations DB
+  // where we will store the specific information of each registration.
+  struct StorageManagerRef;
+  nsClassHashtable<nsIDHashKey, StorageManagerRef> mStorageManagers;
+
+  // --------------------------------------------------------------------------
+  // ChromeStorageManager
+
+  void AddChromeStorageManagerRef(const nsID& aRequestId,
+                                  ChromeStorageManager* aChromeStorageManager);
+  void ReleaseChromeStorageManagerRef(const nsID& aRequestId);
+
+  // References to the ChromeStorageManager managing the system principal
+  // storage.
+  struct ChromeStorageManagerRef;
+  nsClassHashtable<nsIDHashKey, ChromeStorageManagerRef>
+    mChromeStorageManagers;
+
+  // --------------------------------------------------------------------------
+  // OnlineStateObserver::Listener method
+
+  virtual void
+  OnOnlineStateChanged(OnlineStateObserver::OnlineState aState) override;
+
+  RefPtr<OnlineStateObserver> mOnlineStateObserver;
+  OnlineStateObserver::OnlineState mOnlineState;
+
+  // --------------------------------------------------------------------------
+  // StorageManagerId
+
+  void AddStorageManagerIdFactory(StorageManagerIdFactory* aFactory);
+  void OnStorageManagerIdCreated(StorageManagerId* aManagerId,
+                                 StorageManagerIdFactory* aFactory) override;
+
+  nsTHashtable<nsRefPtrHashKey<StorageManagerIdFactory>>
+    mStorageManagerIdFactories;
+};
+
+} // namespace backgroundsync
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_SyncService_h
diff --git a/dom/backgroundsync/ChromeStorageManager.cpp b/dom/backgroundsync/ChromeStorageManager.cpp
--- a/dom/backgroundsync/ChromeStorageManager.cpp
+++ b/dom/backgroundsync/ChromeStorageManager.cpp
@@ -250,51 +250,54 @@ private:
   SyncOpResponse mResponse;
 };
 
 NS_IMPL_ISUPPORTS(StorageActionRunnable, nsICancelableRunnable, nsIRunnable)
 
 //-----------------------------------------------------------------------------
 // PBackground thread
 
-ChromeStorageManager::ChromeStorageManager()
+ChromeStorageManager::ChromeStorageManager(BackgroundSyncService* aService)
+  : mService(aService)
 {
   AssertIsOnBackgroundThread();
+  MOZ_ASSERT(aService);
 
   Init();
 }
 
 ChromeStorageManager::~ChromeStorageManager()
 {
   AssertIsOnBackgroundThread();
 
   if (mDBConn) {
     RefPtr<ShutdownRunnable> runnable = new ShutdownRunnable(mDBConn);
     mIOThread->Dispatch(runnable, nsIThread::DISPATCH_NORMAL);
     mDBConn = nullptr;
   }
 
   mPendingActions.Clear();
 
+  mService = nullptr;
   /*
   nsCOMPtr<nsIThread> ioThread;
   mIOThread.swap(ioThread);
   MOZ_ALWAYS_SUCCEEDS(NS_DispatchToMainThread(
         NewRunnableMethod(ioThread, &nsIThread::Shutdown)));*/
 }
 
 // static
 already_AddRefed<ChromeStorageManager>
-ChromeStorageManager::GetOrCreate()
+ChromeStorageManager::GetOrCreate(BackgroundSyncService* aService)
 {
   AssertIsOnBackgroundThread();
 
   RefPtr<ChromeStorageManager> instance = csmInstance;
   if (!instance) {
-    instance = new ChromeStorageManager();
+    instance = new ChromeStorageManager(aService);
   }
   return instance.forget();
 }
 
 void
 ChromeStorageManager::Init()
 {
   AssertIsOnBackgroundThread();
@@ -370,15 +373,16 @@ ChromeStorageManager::GetAll(const nsID&
   ExecuteStorageAction(action);
 }
 
 void
 ChromeStorageManager::OnRequestComplete(const nsID& aRequestId,
                                         const SyncOpResponse& aResponse)
 {
   AssertIsOnBackgroundThread();
+  MOZ_ASSERT(mService);
 
-  // XXX Notify listener.
+  mService->OnRequestComplete(aRequestId, aResponse);
 }
 
 } // namespace backgroundsync
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/backgroundsync/ChromeStorageManager.h b/dom/backgroundsync/ChromeStorageManager.h
--- a/dom/backgroundsync/ChromeStorageManager.h
+++ b/dom/backgroundsync/ChromeStorageManager.h
@@ -20,45 +20,49 @@
 #include "mozilla/ipc/BackgroundParent.h"
 #include "mozilla/storage.h"
 #include "nsISupportsImpl.h"
 
 namespace mozilla {
 namespace dom {
 namespace backgroundsync {
 
+class BackgroundSyncService;
 class ChromeStorageAction;
+class SyncOpResponse;
 
 class ChromeStorageManager final
 {
   friend class InitRunnable;
   friend class StorageActionRunnable;
 
 public:
   NS_INLINE_DECL_THREADSAFE_REFCOUNTING(ChromeStorageManager)
 
   static already_AddRefed<ChromeStorageManager>
-  GetOrCreate();
+  GetOrCreate(BackgroundSyncService* aService);
 
   void Register(const nsID& aRequestId, const nsAString& aOrigin);
   void Unregister(const nsID& aRequestId, const nsAString& aOrigin);
   void GetAll(const nsID& aRequestId);
 
 private:
-  ChromeStorageManager();
+  ChromeStorageManager(BackgroundSyncService* aService);
   ~ChromeStorageManager();
 
   void Init();
   void OnInitialized(mozIStorageConnection* aConn);
 
   void ExecuteStorageAction(ChromeStorageAction* aAction);
 
   void OnRequestComplete(const nsID& aRequestId,
                          const SyncOpResponse& aResponse);
 
+  RefPtr<BackgroundSyncService> mService;
+
   nsCOMPtr<nsIThread> mIOThread;
   nsCOMPtr<mozIStorageConnection> mDBConn;
 
   nsTArray<RefPtr<ChromeStorageAction>> mPendingActions;
 };
 
 } // namespace backgroundsync
 } // namespace dom
diff --git a/dom/backgroundsync/StorageManager.cpp b/dom/backgroundsync/StorageManager.cpp
--- a/dom/backgroundsync/StorageManager.cpp
+++ b/dom/backgroundsync/StorageManager.cpp
@@ -48,17 +48,18 @@ public:
 // Singleton class to track StorageManager instances and ensure there is only
 // one for each unique StorageManagerId.
 class StorageManager::Factory
 {
 public:
   friend class StaticAutoPtr<StorageManager::Factory>;
 
   static nsresult
-  GetOrCreate(StorageManagerId* aManagerId,
+  GetOrCreate(BackgroundSyncService* aService,
+              StorageManagerId* aManagerId,
               StorageManager** aManagerOut)
   {
     AssertIsOnBackgroundThread();
 
     // Ensure there is a factory instance. This forces the Get() call
     // below to use the same factory.
     nsresult rv = MaybeCreateInstance();
     if (NS_WARN_IF(NS_FAILED(rv))) {
@@ -68,17 +69,17 @@ public:
     RefPtr<StorageManager> ref = Get(aManagerId);
     if (!ref) {
       nsCOMPtr<nsIThread> ioThread;
       rv = NS_NewNamedThread("BSyncIOThread", getter_AddRefs(ioThread));
       if (NS_WARN_IF(NS_FAILED(rv))) {
         return rv;
       }
 
-      ref = new StorageManager(aManagerId, ioThread);
+      ref = new StorageManager(aService, aManagerId, ioThread);
 
       // There may be an old manager for this origin in the process of
       // cleaning up.  We need to tell the new manager about this so
       // that it won't actually start until the old manager is done.
       RefPtr<StorageManager> oldManager = Get(aManagerId, Closing);
       ref->Init(oldManager);
 
       MOZ_ASSERT(!sFactory->mManagerList.Contains(ref));
@@ -479,33 +480,33 @@ public:
   }
 
   virtual void
   Complete(nsresult aRv) override
   {
     NS_WARN_IF(NS_FAILED(aRv));
     // We need to remove the reference to the request independently of
     // its result so we can close the context.
-    mManager->OnRequestComplete(mRequestId,
-      SyncOpResponse(void_t()));
+    mManager->OnRequestComplete(mRequestId, SyncOpResponse(void_t()));
   }
 
 private:
   SyncChangeStateArgs mArgs;
 };
 
 // ---------------------------------------------------------------------------
 
 // static
 nsresult
-StorageManager::GetOrCreate(StorageManagerId* aManagerId,
+StorageManager::GetOrCreate(BackgroundSyncService* aService,
+                            StorageManagerId* aManagerId,
                             StorageManager** aManagerOut)
 {
   AssertIsOnBackgroundThread();
-  return Factory::GetOrCreate(aManagerId, aManagerOut);
+  return Factory::GetOrCreate(aService, aManagerId, aManagerOut);
 }
 
 // static
 void
 StorageManager::ShutdownAll()
 {
   mozilla::ipc::AssertIsOnBackgroundThread();
 
@@ -522,34 +523,39 @@ StorageManager::ShutdownAll()
 void
 StorageManager::Abort(const nsACString& aOrigin)
 {
  mozilla::ipc::AssertIsOnBackgroundThread();
 
  Factory::Abort(aOrigin);
 }
 
-StorageManager::StorageManager(StorageManagerId* aManagerId,
+StorageManager::StorageManager(BackgroundSyncService* aService,
+                               StorageManagerId* aManagerId,
                                nsIThread* aIOThread)
-  : mManagerId(aManagerId)
+  : mService(aService)
+  , mManagerId(aManagerId)
   , mIOThread(aIOThread)
   , mContext(nullptr)
   , mShuttingDown(false)
   , mState(Open)
 {
+  MOZ_ASSERT(mService);
   MOZ_ASSERT(mManagerId);
   MOZ_ASSERT(mIOThread);
 }
 
 StorageManager::~StorageManager()
 {
   NS_ASSERT_OWNINGTHREAD(StorageManager);
   MOZ_ASSERT(mState == Closing);
   MOZ_ASSERT(!mContext);
 
+  mService = nullptr;
+
 /*  nsCOMPtr<nsIThread> ioThread;
   mIOThread.swap(ioThread);
 
   // Don't spin the event loop in the destructor waiting for the thread to
   // shutdown. Defer this to the main thread, instead.
   MOZ_ALWAYS_SUCCEEDS(NS_DispatchToMainThread(
         NewRunnableMethod(ioThread, &nsIThread::Shutdown)));*/
 }
@@ -751,20 +757,19 @@ StorageManager::OnRequestComplete(const 
   NS_ASSERT_OWNINGTHREAD(StorageManager);
   MOZ_ASSERT(mPendingRequests.Contains(aRequestId));
 
   mPendingRequests.RemoveElement(aRequestId);
 
   MaybeAllowContextToClose();
 }
 
-template<typename T>
 void
-StorageManager::OnRequestComplete(const nsID& aRequestId, const T& aResponse)
+StorageManager::OnRequestComplete(const nsID& aRequestId,
+                                  const SyncOpResponse& aResponse)
 {
-  // XXX Notify listener
-
+  mService->OnRequestComplete(aRequestId, SyncOpResponse(aResponse));
   OnRequestComplete(aRequestId);
 }
 
 } // namespace backgroundsync
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/backgroundsync/StorageManager.h b/dom/backgroundsync/StorageManager.h
--- a/dom/backgroundsync/StorageManager.h
+++ b/dom/backgroundsync/StorageManager.h
@@ -26,20 +26,23 @@ namespace backgroundsync {
  *
  * The StorageManager instances are kept alive by the BackgroundSyncService,
  * which keeps a reference to the StorageManager dealing with a storage request
  * until that request is completed or the actor requesting it is destroyed.
  */
 
 class StorageManager final
 {
+  friend class BackgroundSyncService;
+
 public:
   NS_INLINE_DECL_REFCOUNTING(StorageManager)
 
-  static nsresult GetOrCreate(StorageManagerId* aManagerId,
+  static nsresult GetOrCreate(BackgroundSyncService* aService,
+                              StorageManagerId* aManagerId,
                               StorageManager** aManagerOut);
 
   enum State
   {
     Open,
     Closing
   };
 
@@ -74,33 +77,36 @@ private:
   class BaseAction;
   class ChangeStateAction;
   class Factory;
   class GetAllAction;
   class GetTagsAction;
   class RegisterAction;
   class RemoveAction;
 
-  StorageManager(StorageManagerId* aManagerId,
+  StorageManager(BackgroundSyncService* aService,
+                 StorageManagerId* aManagerId,
                  nsIThread* aIOThread);
   ~StorageManager();
 
   void Init(StorageManager* aOldManager);
   void Abort();
   void Shutdown();
 
   void MaybeAllowContextToClose();
 
   void OnRequestComplete(const nsID& aRequestId);
-  template<typename T>
-  void OnRequestComplete(const nsID& aRequestId, const T& aResponse);
+  void OnRequestComplete(const nsID& aRequestId,
+                         const SyncOpResponse& aResponse);
 
   void ExecuteRequest(const nsID& aRequestId, StorageAction* aAction);
   void ExecuteRequest(const nsID& aRequestId, const SyncInternalOp& aOp);
 
+  RefPtr<BackgroundSyncService> mService;
+
   RefPtr<StorageManagerId> mManagerId;
   nsCOMPtr<nsIThread> mIOThread;
 
   // Weak reference cleared by RemoveStorageContext() in StorageContext
   // destructor.
   StorageContext* MOZ_NON_OWNING_REF mContext;
 
   bool mShuttingDown;
diff --git a/dom/backgroundsync/StorageManagerId.cpp b/dom/backgroundsync/StorageManagerId.cpp
--- a/dom/backgroundsync/StorageManagerId.cpp
+++ b/dom/backgroundsync/StorageManagerId.cpp
@@ -59,17 +59,17 @@ StorageManagerIdFactory::Run()
   // Execute twice. First on the main thread and the back on the originating
   // thread.
 
   if (mManagerId) {
     AssertIsOnBackgroundThread();
 
     ListenerList::ForwardIterator iter(mListenerList);
     while (iter.HasMore()) {
-      iter.GetNext()->OnStorageManagerIdCreated(mManagerId);
+      iter.GetNext()->OnStorageManagerIdCreated(mManagerId, this);
     }
 
     // The listener must clear its reference in
     // OnStorageManagerIdCreated().
     MOZ_ASSERT(mListenerList.IsEmpty());
 
     return NS_OK;
   }
diff --git a/dom/backgroundsync/StorageManagerId.h b/dom/backgroundsync/StorageManagerId.h
--- a/dom/backgroundsync/StorageManagerId.h
+++ b/dom/backgroundsync/StorageManagerId.h
@@ -53,17 +53,18 @@ public:
   // An interface to be implemented by code wishing to use the
   // StorageManagerIdFactory.
   // Note, the Listener implementation is responsible for calling
   // RemoveListener() on the StorageManagerIdFactory to clear the weak
   // reference.
   class Listener
   {
   public:
-    virtual void OnStorageManagerIdCreated(StorageManagerId* aManagerId) = 0;
+    virtual void OnStorageManagerIdCreated(StorageManagerId* aManagerId,
+                                           StorageManagerIdFactory* aFactory) = 0;
   };
 
   static already_AddRefed<StorageManagerIdFactory>
   Create(Listener* aListener, const PrincipalInfo& aPrincipalInfo);
 
   void AddListener(Listener* aListener);
   // The Listener must call RemoveListener() when
   // OnStorageManagerIdCreated is called or when
diff --git a/dom/backgroundsync/moz.build b/dom/backgroundsync/moz.build
--- a/dom/backgroundsync/moz.build
+++ b/dom/backgroundsync/moz.build
@@ -1,23 +1,25 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXPORTS.mozilla.dom.backgroundsync += [
     'BackgroundSync.h',
+    'BackgroundSyncService.h',
     'BackgroundSyncTypes.h',
     'QuotaClient.h'
 ]
 
 UNIFIED_SOURCES += [
     'BackgroundSync.cpp',
     'BackgroundSyncChild.cpp',
     'BackgroundSyncParent.cpp',
+    'BackgroundSyncService.cpp',
     'ChromeDBSchema.cpp',
     'ChromeStorageManager.cpp',
     'DBAction.cpp',
     'DBConnection.cpp',
     'DBSchema.cpp',
     'DBSchemaUtils.cpp',
     'OnlineStateObserver.cpp',
     'QuotaClient.cpp',
diff --git a/dom/workers/PServiceWorkerManager.ipdl b/dom/workers/PServiceWorkerManager.ipdl
--- a/dom/workers/PServiceWorkerManager.ipdl
+++ b/dom/workers/PServiceWorkerManager.ipdl
@@ -33,17 +33,17 @@ parent:
 
 child:
   async NotifyRegister(ServiceWorkerRegistrationData data);
   async NotifySoftUpdate(PrincipalOriginAttributes originAttributes,
                          nsString scope);
   async NotifyUnregister(PrincipalInfo principalInfo, nsString scope);
   async NotifyRemove(nsCString host);
   async NotifyRemoveAll();
-  async NotifyBackgroundSyncEvent(PrincipalInfo principalInfo,
+  async NotifyBackgroundSyncEvent(nsString origin,
                                   nsString scope,
                                   nsString tag,
                                   bool lastChance);
   async __delete__();
 };
 
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/workers/ServiceWorkerManagerChild.cpp b/dom/workers/ServiceWorkerManagerChild.cpp
--- a/dom/workers/ServiceWorkerManagerChild.cpp
+++ b/dom/workers/ServiceWorkerManagerChild.cpp
@@ -92,38 +92,27 @@ ServiceWorkerManagerChild::RecvNotifyRem
   MOZ_ASSERT(swm);
 
   swm->RemoveAll();
   return true;
 }
 
 bool
 ServiceWorkerManagerChild::RecvNotifyBackgroundSyncEvent(
-    const PrincipalInfo& aPrincipalInfo, const nsString& aScope,
+    const nsString& aOrigin, const nsString& aScope,
     const nsString& aTag, const bool& aLastChance)
 {
   if (mShuttingDown) {
     return true;
   }
 
-  nsCOMPtr<nsIPrincipal> principal = PrincipalInfoToPrincipal(aPrincipalInfo);
-  if (NS_WARN_IF(!principal)) {
-    return true;
-  }
-
-  nsAutoCString originSuffix;
-  nsresult rv = principal->GetOriginSuffix(originSuffix);
-  if (NS_WARN_IF(NS_FAILED(rv))) {
-    return true;
-  }
-
   RefPtr<ServiceWorkerManager> swm = ServiceWorkerManager::GetInstance();
   MOZ_ASSERT(swm);
 
-  swm->SendBackgroundSyncEvent(originSuffix,
+  swm->SendBackgroundSyncEvent(NS_ConvertUTF16toUTF8(aOrigin),
                                NS_ConvertUTF16toUTF8(aScope),
                                aTag, aLastChance);
   return true;
 }
 
 } // namespace workers
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/workers/ServiceWorkerManagerChild.h b/dom/workers/ServiceWorkerManagerChild.h
--- a/dom/workers/ServiceWorkerManagerChild.h
+++ b/dom/workers/ServiceWorkerManagerChild.h
@@ -41,17 +41,17 @@ public:
 
   virtual bool RecvNotifyUnregister(const PrincipalInfo& aPrincipalInfo,
                                     const nsString& aScope) override;
 
   virtual bool RecvNotifyRemove(const nsCString& aHost) override;
 
   virtual bool RecvNotifyRemoveAll() override;
 
-  virtual bool RecvNotifyBackgroundSyncEvent(const PrincipalInfo& aPrincipalInfo,
+  virtual bool RecvNotifyBackgroundSyncEvent(const nsString& aOrigin,
                                              const nsString& aScope,
                                              const nsString& aTag,
                                              const bool& aLastChance) override;
 
 private:
   ServiceWorkerManagerChild()
     : mShuttingDown(false)
   {}
diff --git a/dom/workers/ServiceWorkerManagerParent.cpp b/dom/workers/ServiceWorkerManagerParent.cpp
--- a/dom/workers/ServiceWorkerManagerParent.cpp
+++ b/dom/workers/ServiceWorkerManagerParent.cpp
@@ -1,14 +1,15 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#include "BackgroundSyncService.h"
 #include "ServiceWorkerManagerParent.h"
 #include "ServiceWorkerManagerService.h"
 #include "mozilla/AppProcessChecker.h"
 #include "mozilla/dom/ContentParent.h"
 #include "mozilla/dom/ServiceWorkerRegistrar.h"
 #include "mozilla/ipc/BackgroundParent.h"
 #include "mozilla/ipc/BackgroundUtils.h"
 #include "mozilla/unused.h"
@@ -148,22 +149,24 @@ private:
   PrincipalInfo mPrincipalInfo;
   RefPtr<Runnable> mCallback;
   nsCOMPtr<nsIThread> mBackgroundThread;
 };
 
 } // namespace
 
 ServiceWorkerManagerParent::ServiceWorkerManagerParent()
-  : mService(ServiceWorkerManagerService::GetOrCreate())
+  : mServiceWorkerService(ServiceWorkerManagerService::GetOrCreate())
+  , mBackgroundSyncService(backgroundsync::BackgroundSyncService::GetOrCreate())
   , mID(++sServiceWorkerManagerParentID)
   , mActorDestroyed(false)
 {
   AssertIsOnBackgroundThread();
-  mService->RegisterActor(this);
+  mServiceWorkerService->RegisterActor(this);
+  mBackgroundSyncService->RegisterActor(this);
 }
 
 ServiceWorkerManagerParent::~ServiceWorkerManagerParent()
 {
   AssertIsOnBackgroundThread();
 }
 
 already_AddRefed<ContentParent>
@@ -246,89 +249,98 @@ ServiceWorkerManagerParent::RecvUnregist
 }
 
 bool
 ServiceWorkerManagerParent::RecvPropagateSoftUpdate(const PrincipalOriginAttributes& aOriginAttributes,
                                                     const nsString& aScope)
 {
   AssertIsOnBackgroundThread();
 
-  if (NS_WARN_IF(!mService)) {
+  if (NS_WARN_IF(!mServiceWorkerService)) {
     return false;
   }
 
-  mService->PropagateSoftUpdate(mID, aOriginAttributes, aScope);
+  mServiceWorkerService->PropagateSoftUpdate(mID, aOriginAttributes, aScope);
   return true;
 }
 
 bool
 ServiceWorkerManagerParent::RecvPropagateUnregister(const PrincipalInfo& aPrincipalInfo,
                                                     const nsString& aScope)
 {
   AssertIsOnBackgroundThread();
 
-  if (NS_WARN_IF(!mService)) {
+  if (NS_WARN_IF(!mServiceWorkerService)) {
     return false;
   }
 
-  mService->PropagateUnregister(mID, aPrincipalInfo, aScope);
+  mServiceWorkerService->PropagateUnregister(mID, aPrincipalInfo, aScope);
   return true;
 }
 
 bool
 ServiceWorkerManagerParent::RecvPropagateRemove(const nsCString& aHost)
 {
   AssertIsOnBackgroundThread();
 
-  if (NS_WARN_IF(!mService)) {
+  if (NS_WARN_IF(!mServiceWorkerService)) {
     return false;
   }
 
-  mService->PropagateRemove(mID, aHost);
+  mServiceWorkerService->PropagateRemove(mID, aHost);
   return true;
 }
 
 bool
 ServiceWorkerManagerParent::RecvPropagateRemoveAll()
 {
   AssertIsOnBackgroundThread();
 
-  if (NS_WARN_IF(!mService)) {
+  if (NS_WARN_IF(!mServiceWorkerService)) {
     return false;
   }
 
-  mService->PropagateRemoveAll(mID);
+  mServiceWorkerService->PropagateRemoveAll(mID);
   return true;
 }
 
 bool
 ServiceWorkerManagerParent::RecvShutdown()
 {
   AssertIsOnBackgroundThread();
 
-  if (NS_WARN_IF(!mService)) {
+  if (NS_WARN_IF(!mServiceWorkerService)) {
     return false;
   }
 
-  mService->UnregisterActor(this);
-  mService = nullptr;
+  mServiceWorkerService->UnregisterActor(this);
+  mServiceWorkerService = nullptr;
+
+  if (mBackgroundSyncService) {
+    mBackgroundSyncService->UnregisterActor(this);
+    mBackgroundSyncService = nullptr;
+  }
 
   Unused << Send__delete__(this);
   return true;
 }
 
 void
 ServiceWorkerManagerParent::ActorDestroy(ActorDestroyReason aWhy)
 {
   AssertIsOnBackgroundThread();
 
   mActorDestroyed = true;
 
-  if (mService) {
-    // This object is about to be released and with it, also mService will be
+  if (mServiceWorkerService) {
+    // This object is about to be released and with it, also mServiceWorkerService will be
     // released too.
-    mService->UnregisterActor(this);
+    mServiceWorkerService->UnregisterActor(this);
+  }
+
+  if (mBackgroundSyncService) {
+    mBackgroundSyncService->UnregisterActor(this);
   }
 }
 
 } // namespace workers
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/workers/ServiceWorkerManagerParent.h b/dom/workers/ServiceWorkerManagerParent.h
--- a/dom/workers/ServiceWorkerManagerParent.h
+++ b/dom/workers/ServiceWorkerManagerParent.h
@@ -13,16 +13,21 @@ namespace mozilla {
 
 class PrincipalOriginAttributes;
 
 namespace ipc {
 class BackgroundParentImpl;
 } // namespace ipc
 
 namespace dom {
+
+namespace backgroundsync {
+class BackgroundSyncService;
+}
+
 namespace workers {
 
 class ServiceWorkerManagerService;
 
 class ServiceWorkerManagerParent final : public PServiceWorkerManagerParent
 {
   friend class mozilla::ipc::BackgroundParentImpl;
 
@@ -59,17 +64,18 @@ private:
   virtual bool RecvPropagateRemove(const nsCString& aHost) override;
 
   virtual bool RecvPropagateRemoveAll() override;
 
   virtual bool RecvShutdown() override;
 
   virtual void ActorDestroy(ActorDestroyReason aWhy) override;
 
-  RefPtr<ServiceWorkerManagerService> mService;
+  RefPtr<ServiceWorkerManagerService> mServiceWorkerService;
+  RefPtr<backgroundsync::BackgroundSyncService> mBackgroundSyncService;
 
   // We use this ID in the Service in order to avoid the sending of messages to
   // ourself.
   uint64_t mID;
 
   bool mActorDestroyed;
 };
 
diff --git a/dom/workers/moz.build b/dom/workers/moz.build
--- a/dom/workers/moz.build
+++ b/dom/workers/moz.build
@@ -97,16 +97,17 @@ UNIFIED_SOURCES += [
 IPDL_SOURCES += [
     'PServiceWorkerManager.ipdl',
     'ServiceWorkerRegistrarTypes.ipdlh',
 ]
 
 LOCAL_INCLUDES += [
     '../base',
     '../system',
+    '/dom/backgroundsync',
     '/dom/base',
     '/xpcom/build',
     '/xpcom/threads',
 ]
 
 include('/ipc/chromium/chromium-config.mozbuild')
 
 FINAL_LIBRARY = 'xul'
