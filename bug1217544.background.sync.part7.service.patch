# HG changeset patch
# User Fernando Jimenez <ferjmoreno@gmail.com>
# Parent  64f31bfbe14476fb30dce9d6421077abc0a96259
Bug 1217544 - Implement one-off BackgroundSync API. Part 7: BackgroundSyncService. r=baku

diff --git a/dom/backgroundsync/BackgroundSyncParent.cpp b/dom/backgroundsync/BackgroundSyncParent.cpp
--- a/dom/backgroundsync/BackgroundSyncParent.cpp
+++ b/dom/backgroundsync/BackgroundSyncParent.cpp
@@ -1,25 +1,30 @@
 /* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "BackgroundSyncParent.h"
+#include "BackgroundSyncService.h"
 
 #include "mozilla/unused.h"
 #include "mozilla/ipc/BackgroundParent.h"
 
 namespace mozilla {
 
 using namespace ipc;
 
 namespace dom {
 
+namespace {
+  uint64_t sBackgroundSyncManagerParentId = 0;
+}
+
 class BackgroundSyncParent::PendingRequest final
 {
 public:
   NS_INLINE_DECL_REFCOUNTING(PendingRequest)
 
   explicit PendingRequest(const nsID& aRequestId,
                           const SyncOp& aOp)
     : mRequestId(aRequestId)
@@ -38,88 +43,92 @@ public:
 private:
   ~PendingRequest() {}
 
   nsID mRequestId;
   SyncOp mOp;
 };
 
 BackgroundSyncParent::BackgroundSyncParent(const PrincipalInfo& aPrincipalInfo)
+  : mService(BackgroundSyncService::GetOrCreate())
+  , mId(++sBackgroundSyncManagerParentId)
+  , mActorDestroyed(false)
 {
   AssertIsOnBackgroundThread();
 
   mStorageManagerIdFactory =
     StorageManagerIdFactory::Create(this, aPrincipalInfo);
+
+  mService->RegisterActor(this);
 }
 
 BackgroundSyncParent::~BackgroundSyncParent()
 {
   AssertIsOnBackgroundThread();
 }
 
 void
 BackgroundSyncParent::ActorDestroy(ActorDestroyReason aWhy)
 {
   AssertIsOnBackgroundThread();
+
+  mActorDestroyed = true;
+
+  if (mService) {
+    mService->UnregisterActor(this);
+  }
 }
 
-void
+bool
 BackgroundSyncParent::ExecuteRequest(const nsID& aRequestId,
                                      const SyncOp& aOp)
 {
   AssertIsOnBackgroundThread();
 
-  switch(aOp.mArgs().type()) {
-    case SyncOpArgs::TSyncRegisterArgs:
-    {
-      // XXX Do registration.
-      const SyncRegisterResponse response(true);
-      //const SyncOpError response(static_cast<uint32_t>(NS_ERROR_FAILURE));
-      Unused << SendResponse(aRequestId, response);
-      break;
-    }
-    case SyncOpArgs::TSyncGetTagsArgs:
-    {
-      //XXX Do GetTags.
-      nsTArray<nsString> tags;
-      const SyncGetTagsResponse response(tags);
-      Unused << SendResponse(aRequestId, response);
-      break;
-    }
-    default:
-    {
-      MOZ_CRASH("Unknown BackgroundSync request");
-    }
+  if (NS_WARN_IF(!mService)) {
+    return false;
   }
+
+  mService->Request(mId, mStorageManagerId, aRequestId, aOp);
+
+  return true;
 }
 
 bool
 BackgroundSyncParent::RecvRequest(const nsID& aRequestId,
                                   const SyncOp& aOp)
 {
   AssertIsOnBackgroundThread();
 
   // If we haven't created a StorageManagerId for this parent yet, we
   // queue the request.
   if (!mStorageManagerId) {
     RefPtr<PendingRequest> pendingRequest = new PendingRequest(aRequestId, aOp);
     mPendingRequests.AppendElement(pendingRequest);
     return true;
   }
 
-  ExecuteRequest(aRequestId, aOp);
-  return true;
+  return ExecuteRequest(aRequestId, aOp);
 }
 
 bool
 BackgroundSyncParent::RecvShutdown()
 {
   AssertIsOnBackgroundThread();
 
-  Unused << Send__delete__(this);
+  if (NS_WARN_IF(!mService)) {
+    return false;
+  }
+
+  mService->UnregisterActor(this);
+  mService = nullptr;
+
+  if (!mActorDestroyed) {
+    Unused << Send__delete__(this);
+  }
 
   return true;
 }
 
 void
 BackgroundSyncParent::OnStorageManagerIdCreated(
     StorageManagerId* aManagerId)
 {
diff --git a/dom/backgroundsync/BackgroundSyncParent.h b/dom/backgroundsync/BackgroundSyncParent.h
--- a/dom/backgroundsync/BackgroundSyncParent.h
+++ b/dom/backgroundsync/BackgroundSyncParent.h
@@ -18,41 +18,63 @@ namespace mozilla {
 
 namespace ipc {
   class BackgroundParentImpl;
   class PrincipalInfo;
 } // namespace ipc
 
 namespace dom {
 
+class BackgroundSyncService;
+
 class BackgroundSyncParent final : public PBackgroundSyncParent
                                  , StorageManagerIdFactory::Listener
 {
   friend class mozilla::ipc::BackgroundParentImpl;
   friend class CreateManagerIdRunnable;
 
 public:
   NS_INLINE_DECL_REFCOUNTING(BackgroundSyncParent)
 
   virtual bool RecvRequest(const nsID& aRequestId,
                            const SyncOp& aOp) override;
 
   virtual bool RecvShutdown() override;
+
+  uint64_t Id() const
+  {
+    return mId;
+  }
+
+  bool ActorDestroyed() const
+  {
+    return mActorDestroyed;
+  }
+
 private:
   BackgroundSyncParent(const PrincipalInfo& aPrincipalInfo);
   ~BackgroundSyncParent();
 
   virtual void ActorDestroy(ActorDestroyReason aWhy) override;
 
-  void ExecuteRequest(const nsID& aRequestId, const SyncOp& aOp);
+  bool ExecuteRequest(const nsID& aRequestId, const SyncOp& aOp);
 
   // StorageManagerId method
   virtual void
   OnStorageManagerIdCreated(StorageManagerId* aManagerId) override;
 
+  // BackgroundSyncParent objects keep BackgroundSyncService alive.
+  RefPtr<BackgroundSyncService> mService;
+
+  // The identifier will be used by the BackgroundSyncService to know
+  // which request belongs to which parent actor.
+  uint64_t mId;
+
+  bool mActorDestroyed;
+
   RefPtr<StorageManagerIdFactory> mStorageManagerIdFactory;
   // We use this Id to ensure that we have a single StorageManager
   // per principal.
   RefPtr<StorageManagerId> mStorageManagerId;
 
   class PendingRequest;
   nsTArray<RefPtr<PendingRequest>> mPendingRequests;
 };
diff --git a/dom/backgroundsync/BackgroundSyncService.cpp b/dom/backgroundsync/BackgroundSyncService.cpp
new file mode 100644
--- /dev/null
+++ b/dom/backgroundsync/BackgroundSyncService.cpp
@@ -0,0 +1,180 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+* file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/**
+ * This singleton object is kept alive by the BackgroundSyncParent and
+ * ServiceWorkerManagerParent instances.
+ *
+ * It proxies storage requests such as sync registrations and get tags
+ * coming from the DOM objects through the IPC actors and makes sure that
+ * the storage context is ready for them.
+ *
+ * It also observes online/offline state changes and triggers the appropriate
+ * `sync` events whenever is needed.
+ */
+
+#include "BackgroundSyncService.h"
+#include "StorageManager.h"
+
+namespace mozilla {
+namespace dom {
+
+namespace {
+  BackgroundSyncService* sInstance = nullptr;
+} // namespace
+
+// ----------------------------------------------------------------------------
+
+struct BackgroundSyncService::StorageManagerRef final
+{
+  explicit StorageManagerRef(const uint64_t aActorId,
+                             StorageManager* aStorageManager)
+    : mActorId(aActorId)
+    , mStorageManager(aStorageManager)
+  {}
+
+  uint64_t mActorId;
+  RefPtr<StorageManager> mStorageManager;
+};
+
+void
+BackgroundSyncService::AddStorageManagerRef(const nsID& aRequestId,
+                                            const uint64_t aActorId,
+                                            StorageManager* aStorageManager)
+{
+  StorageManagerRef* ref = new StorageManagerRef(aActorId, aStorageManager);
+  mStorageManagers.Put(aRequestId, ref);
+}
+
+void
+BackgroundSyncService::ReleaseStorageManagerRef(const nsID& aRequestId)
+{
+  nsAutoPtr<StorageManagerRef> doomed;
+  mStorageManagers.RemoveAndForget(aRequestId, doomed);
+}
+
+void
+BackgroundSyncService::ReleaseStorageManagerRef(const uint64_t aActorId)
+{
+  for (auto iter = mStorageManagers.Iter(); !iter.Done(); iter.Next()) {
+    StorageManagerRef* ref;
+    mStorageManagers.Get(iter.Key(), &ref);
+    if (NS_WARN_IF(!ref)) {
+      continue;
+    }
+    if (ref->mActorId == aActorId) {
+      ref->mStorageManager = nullptr;
+      nsAutoPtr<StorageManagerRef> doomed;
+      mStorageManagers.RemoveAndForget(iter.Key(), doomed);
+    }
+  }
+}
+
+// ----------------------------------------------------------------------------
+
+BackgroundSyncService::BackgroundSyncService()
+  : mOnlineState(OnlineStateObserver::UNKNOWN)
+{
+  AssertIsOnBackgroundThread();
+
+  // sInstance is a raw BackgroundSyncService*.
+  MOZ_ASSERT(!sInstance);
+  sInstance = this;
+}
+
+BackgroundSyncService::~BackgroundSyncService()
+{
+  AssertIsOnBackgroundThread();
+  MOZ_ASSERT(sInstance == this);
+  MOZ_ASSERT(mBackgroundSyncActors.Count() == 0);
+
+  mOnlineStateObserver->Shutdown(this);
+
+  sInstance = nullptr;
+}
+
+// static
+already_AddRefed<BackgroundSyncService>
+BackgroundSyncService::GetOrCreate()
+{
+  AssertIsOnBackgroundThread();
+
+  RefPtr<BackgroundSyncService> instance = sInstance;
+  if (!instance) {
+    instance = new BackgroundSyncService();
+    instance->Init();
+  }
+  return instance.forget();
+}
+
+void
+BackgroundSyncService::Init()
+{
+  mOnlineStateObserver = OnlineStateObserver::Init(this);
+}
+
+void
+BackgroundSyncService::RegisterActor(BackgroundSyncParent* aParent)
+{
+  AssertIsOnBackgroundThread();
+  MOZ_ASSERT(aParent);
+  MOZ_ASSERT(!mBackgroundSyncActors.Contains(aParent));
+
+  mBackgroundSyncActors.PutEntry(aParent);
+}
+
+void
+BackgroundSyncService::UnregisterActor(BackgroundSyncParent* aParent)
+{
+  AssertIsOnBackgroundThread();
+  MOZ_ASSERT(aParent);
+  MOZ_ASSERT(mBackgroundSyncActors.Contains(aParent));
+
+  ReleaseStorageManagerRef(aParent->Id());
+  mBackgroundSyncActors.RemoveEntry(aParent);
+}
+
+void
+BackgroundSyncService::Request(const uint64_t aActorId,
+                               StorageManagerId* aManagerId,
+                               const nsID& aRequestId,
+                               const SyncOp& aOp)
+{
+  AssertIsOnBackgroundThread();
+
+  printf_stderr("BackgroundSyncService::Request\n");
+
+  RefPtr<StorageManager> manager;
+  nsresult rv = StorageManager::GetOrCreate(aManagerId,
+                                            getter_AddRefs(manager));
+  if (NS_WARN_IF(NS_FAILED(rv))) {
+    // XXX Notify error to actor.
+    return;
+  }
+
+  printf_stderr("YAY\n");
+}
+
+/**
+ * OnlineStateObserver::Listener implementation.
+ */
+
+void
+BackgroundSyncService::OnOnlineStateChanged(
+    OnlineStateObserver::OnlineState aState)
+{
+  mOnlineState = aState;
+
+  if (mOnlineState != OnlineStateObserver::ONLINE) {
+    return;
+  }
+
+  // XXX If we are online we need to get the list of registered sync requests
+  //     to trigger the corresponding 'sync' events.
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/backgroundsync/BackgroundSyncService.h b/dom/backgroundsync/BackgroundSyncService.h
new file mode 100644
--- /dev/null
+++ b/dom/backgroundsync/BackgroundSyncService.h
@@ -0,0 +1,59 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+* You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_dom_BackgroundSyncService_h
+#define mozilla_dom_BackgroundSyncService_h
+
+#include "OnlineStateObserver.h"
+
+namespace mozilla {
+namespace dom {
+
+class StorageManager;
+
+class BackgroundSyncService final : public OnlineStateObserver::Listener
+{
+public:
+  NS_INLINE_DECL_THREADSAFE_REFCOUNTING(BackgroundSyncService)
+
+  static already_AddRefed<BackgroundSyncService> GetOrCreate();
+
+  void RegisterActor(BackgroundSyncParent* aParent);
+  void UnregisterActor(BackgroundSyncParent* aParent);
+
+  void Request(const uint64_t aActorId,
+               StorageManagerId* aManagerId,
+               const nsID& aRequestId,
+               const SyncOp& aOp);
+
+private:
+  BackgroundSyncService();
+  ~BackgroundSyncService();
+
+  void Init();
+
+  void AddStorageManagerRef(const nsID& aRequestId,
+                            const uint64_t aActorId,
+                            StorageManager* aStorageManager);
+  void ReleaseStorageManagerRef(const nsID& aRequestId);
+  void ReleaseStorageManagerRef(const uint64_t aActorId);
+
+  // OnlineStateObserver::Listener method
+  virtual void
+  OnOnlineStateChanged(OnlineStateObserver::OnlineState aState) override;
+
+  RefPtr<OnlineStateObserver> mOnlineStateObserver;
+  OnlineStateObserver::OnlineState mOnlineState;
+
+  nsTHashtable<nsRefPtrHashKey<BackgroundSyncParent>> mBackgroundSyncActors;
+  struct StorageManagerRef;
+  nsClassHashtable<nsIDHashKey, StorageManagerRef> mStorageManagers;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_SyncService_h
diff --git a/dom/backgroundsync/DBAction.cpp b/dom/backgroundsync/DBAction.cpp
--- a/dom/backgroundsync/DBAction.cpp
+++ b/dom/backgroundsync/DBAction.cpp
@@ -48,17 +48,17 @@ DBAction::RunOnTarget(Resolver* aResolve
 
   nsCOMPtr<nsIFile> dbDir;
   nsresult rv = aQuotaInfo.mDir->Clone(getter_AddRefs(dbDir));
   if (NS_WARN_IF(NS_FAILED(rv))) {
     aResolver->Resolve(rv);
     return;
   }
 
-  rv = dbDir->Append(NS_LITERAL_STRING("cache"));
+  rv = dbDir->Append(NS_LITERAL_STRING("backgroundsync"));
   if (NS_WARN_IF(NS_FAILED(rv))) {
     aResolver->Resolve(rv);
     return;
   }
 
   nsCOMPtr<mozIStorageConnection> conn;
 
   // Attempt to reuse the connection opened by a previous Action.
diff --git a/dom/backgroundsync/DBSchema.cpp b/dom/backgroundsync/DBSchema.cpp
--- a/dom/backgroundsync/DBSchema.cpp
+++ b/dom/backgroundsync/DBSchema.cpp
@@ -25,17 +25,17 @@ const int32_t kLatestSchemaVersion = 1;
 // ---------
 const char* const kTableRegistrations =
   "CREATE TABLE registrations ("
     "id TEXT NOT NULL PRIMARY KEY, " // Concatenation of scope + tag
     "originSuffix TEXT NOT NULL, "
     "scope TEXT NOT NULL, "
     "tag TEXT NOT NULL, "
     "state INTEGER NOT NULL, "
-    "lastChance INTEGER NOT NULL, "
+    "lastChance INTEGER NOT NULL"
   ")";
 
 // ---------
 // End schema definition
 // ---------
 
 const int32_t kMaxEntriesPerStatement = 255;
 
diff --git a/dom/backgroundsync/StorageContext.cpp b/dom/backgroundsync/StorageContext.cpp
--- a/dom/backgroundsync/StorageContext.cpp
+++ b/dom/backgroundsync/StorageContext.cpp
@@ -890,31 +890,34 @@ StorageContext::CancelAll()
   }
   AllowToClose();
 }
 
 bool
 StorageContext::IsCanceled() const
 {
   NS_ASSERT_OWNINGTHREAD(StorageContext);
+
   return mState == STATE_CONTEXT_CANCELED;
 }
 
 void
 StorageContext::Invalidate()
 {
   NS_ASSERT_OWNINGTHREAD(StorageContext);
+
   mManager->NoteClosing();
   CancelAll();
 }
 
 void
 StorageContext::AllowToClose()
 {
   NS_ASSERT_OWNINGTHREAD(StorageContext);
+
   if (mThreadsafeHandle) {
     mThreadsafeHandle->AllowToClose();
   }
 }
 
 StorageContext::~StorageContext()
 {
   NS_ASSERT_OWNINGTHREAD(StorageContext);
diff --git a/dom/backgroundsync/StorageContext.h b/dom/backgroundsync/StorageContext.h
--- a/dom/backgroundsync/StorageContext.h
+++ b/dom/backgroundsync/StorageContext.h
@@ -2,16 +2,19 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_StorageContext_h
 #define mozilla_dom_StorageContext_h
 
+#include "BackgroundSyncTypes.h"
+#include "StorageAction.h"
+
 namespace mozilla {
 namespace dom {
 
 namespace quota {
   class DirectoryLock;
 } // namespace quota
 
 class StorageManager;
diff --git a/dom/backgroundsync/StorageManager.cpp b/dom/backgroundsync/StorageManager.cpp
--- a/dom/backgroundsync/StorageManager.cpp
+++ b/dom/backgroundsync/StorageManager.cpp
@@ -38,17 +38,17 @@ public:
 
     return rv;
   }
 };
 } // anonymous namespace
 
 // ---------------------------------------------------------------------------
 
-// Singleton class to track Manager instances and ensure there is only
+// Singleton class to track StorageManager instances and ensure there is only
 // one for each unique StorageManagerId.
 class StorageManager::Factory
 {
 public:
   friend class StaticAutoPtr<StorageManager::Factory>;
 
   static nsresult
   GetOrCreate(StorageManagerId* aManagerId,
@@ -387,13 +387,43 @@ StorageManager::NoteClosing()
 
   // This can be called more than once legitimately through different paths.
   mState = Closing;
 }
 
 void
 StorageManager::RemoveStorageContext(StorageContext* aContext)
 {
-  // XXX
+  NS_ASSERT_OWNINGTHREAD(StorageManager);
+  MOZ_ASSERT(mContext);
+  MOZ_ASSERT(mContext == aContext);
+
+  // Wether the StorageContext destruction was triggered from the StorageManager
+  // going idle or the underlying storage being invalidated, we should know we
+  // are closing before the StorageContext is destroyed.
+  MOZ_ASSERT(mState == Closing);
+
+  mContext = nullptr;
+
+  // Once the context is gone, we can immediately remove ourself from the
+  // Factory list. We don't need to block shutdown by stayin in the list
+  // any more.
+  Factory::Remove(this);
+}
+
+void
+StorageManager::MaybeAllowContextToClose()
+{
+  NS_ASSERT_OWNINGTHREAD(StorageManager);
+  // If we have an active context, but we have no more users of the
+  // StorageManager, then let it shut itself down. We must wait for all
+  // possible users of state information to complete before doing this.
+  RefPtr<StorageContext> context = mContext;
+  if (context) { //XXX && mListeners.isEmpty()) {
+    // Mark the StorageManager as invalid so that it won't get used again.
+    NoteClosing();
+
+    context->AllowToClose();
+  }
 }
 
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/backgroundsync/StorageManager.h b/dom/backgroundsync/StorageManager.h
--- a/dom/backgroundsync/StorageManager.h
+++ b/dom/backgroundsync/StorageManager.h
@@ -2,29 +2,35 @@
 /* vim: set ts=8 sts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_StorageManager_h
 #define mozilla_dom_StorageManager_h
 
+#include "StorageContext.h"
+
 namespace mozilla {
 namespace dom {
 
 /**
  * The StorageManager class is responsible for managing the storage of sync
  * requests. The DOM objects and IPC actors are basically just plumbing to
  * get the request to the right StorageManager object running in the parent
  * process.
  *
  * There should be exactly one StorageManager object for each origin or app
  * using the BackgroundSync API. This uniqueness is defined by the
  * StorageManagerId equality operator. The uniqueness is enforced by the
  * Manager GetOrCreate() factory method.
+ *
+ * The StorageManager instances are kept alive by the BackgroundSyncService,
+ * which keeps a reference to the StorageManager dealing with a storage request
+ * until that request is completed or the actor requesting it is destroyed.
  */
 
 class StorageManager final
 {
 public:
   NS_INLINE_DECL_REFCOUNTING(StorageManager)
 
   static nsresult GetOrCreate(StorageManagerId* aManagerId,
@@ -60,16 +66,18 @@ private:
 
   StorageManager(StorageManagerId* aManagerId, nsIThread* aIOThread);
   ~StorageManager();
 
   void Init(StorageManager* aOldManager);
   void Abort();
   void Shutdown();
 
+  void MaybeAllowContextToClose();
+
   RefPtr<StorageManagerId> mManagerId;
   nsCOMPtr<nsIThread> mIOThread;
 
   // Weak reference cleared by RemoveStorageContext() in StorageContext
   // destructor.
   StorageContext* MOZ_NON_OWNING_REF mContext;
 
   bool mShuttingDown;
diff --git a/dom/backgroundsync/moz.build b/dom/backgroundsync/moz.build
--- a/dom/backgroundsync/moz.build
+++ b/dom/backgroundsync/moz.build
@@ -6,16 +6,17 @@
 EXPORTS.mozilla.dom += [
     'BackgroundSync.h'
 ]
 
 UNIFIED_SOURCES += [
     'BackgroundSync.cpp',
     'BackgroundSyncChild.cpp',
     'BackgroundSyncParent.cpp',
+    'BackgroundSyncService.cpp',
     'DBAction.cpp',
     'DBConnection.cpp',
     'DBSchema.cpp',
     'OnlineStateObserver.cpp',
     'StorageAction.cpp',
     'StorageContext.cpp',
     'StorageManager.cpp',
     'StorageManagerId.cpp'
